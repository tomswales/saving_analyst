{"version":3,"sources":["Transactions/TransactionListControls/TransactionListControls.js","Transactions/TransactionList/TransactionRow/CategoryEditor/CategoryEditor.js","Transactions/TransactionList/TransactionRow/DeleteControl/DeleteControl.js","Transactions/TransactionList/TransactionRow/TransactionRow.js","Transactions/TransactionList/SortMenu/SortMenu.js","Transactions/TransactionList/TransactionList.js","Transactions/Transactions.js","MenuBar/MenuBar.js","Reports/IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart.js","Reports/CumulativeSavingsChart/CumulativeSavingsChart.js","Reports/ExpenditureByCategoryChart/ExpenditureByCategoryChart.js","Reports/SavingTrajectoryChart/SavingTrajectoryChart.js","Reports/IncomeByCategoryChart/IncomeByCategoryChart.js","Reports/Reports.js","App.js","index.js"],"names":["TransactionListControls","props","importCategoryMappingRef","useRef","chance","Chance","className","onClick","e","preventDefault","clearTransactions","generateCategoryMapping","onChange","event","files","target","length","importCategoryMappings","handleCategoryMappingImportInputChange","ref","type","accept","current","click","onSubmit","htmlFor","checked","filterClassified","handleFilterClassifiedChange","setFilterClassified","value","filterByCategory","handleFilterCategoryChange","setCategoryFilter","categoryList","map","item","key","string","filterByTransactionType","handleFilterTransactionTypeChange","setTransactionTypeFilter","CategoryEditor","useState","editingCategory","setEditingCategory","enteringCategoryName","setEnteringCategoryName","prediction","getPrediction","transaction","id","category","selectCategoryChange","updateCategoryForMatchingItems","resetState","placeholder","confirmPredictedCategory","setCategoryEditing","bool","DeleteControl","confirmDelete","setConfirmDelete","deleteTransaction","transactionId","TransactionRow","stateOwner","SortMenu","sortBy","setSortBy","renderDate","renderAmount","TransactionList","sortedTransactions","slice","displayLimit","transactionLength","Transactions","uploadFileRef","transactions","reduce","acc","find","concat","sort","generateCategoryListDynamically","filteredTransactions","filteredOutClassified","filter","filtererdByCategoryTransactions","filterTransactions","a","b","dateA","moment","bookingDate","dateB","isBefore","amount","utc","sortTransactions","fileURL","window","URL","createObjectURL","importTransactions","handleImportInputChange","showMoreTransactions","MenuBar","handleMenuItemClick","route","setRoute","IncomeExpenditureByMonthChart","incomeExpenditureByMonthCanvas","savedChart","useEffect","destroy","canvas","labels","data","month","year","datasets","label","income","backgroundColor","expenditure","total","pointRadius","ctx","getContext","chart","Chart","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","responsive","CumulativeSavingsChart","savingTrajectoryCanvas","savedTotal","ExpenditureByCategoryChart","expenditureByCategoryCanvas","months","colors","palette","index","xAxes","stacked","SavingTrajectoryChart","currentBalance","savingGoal","interestRate","savingRate","dataForRegression","accumulator","newTotal","regression","linear","generateSavingsRegression","equation","balance","maxYears","projectHelper","balanceWithInterest","interestPercentage","counter","result","newBalance","newBalanceWithInterest","Math","round","newCounter","newResult","project","generateSavingsProjection","borderColor","fill","lineTension","max","parseFloat","animation","renderChart","IncomeByCategoryChart","incomeByCategoryCanvas","decimals","Number","convertCategoriesToMap","categories","cats","Map","Reports","currentSavings","accountSavings","isNaN","otherSavings","otherSavingsBalance","getCurrentSavings","monthlyBreakdown","useMemo","get","accYear","previousMonth","previousIncome","previousExpenditure","previousTotal","newTransactions","newMonthValue","set","monthData","Array","prototype","apply","from","values","periodSummary","totalSaving","toFixed","totalMonths","averageSaving","percentSaved","summariseMonthlyData","savingsTrajectory","array","totalCumulativeSavings","floatValue","previousSaved","calculateSavingTrajectoryByMonth","categoryExpenditureByMonth","transactionsByMonth","monthlyCategories","initialValue","has","calculateCategoryExpenditureTotals","generateMonthlyCategoryBreakdown","montlyTotaller","filteredCategoryDatasets","noExpenditures","every","dataPoint","generateMonthlyCategoryDatasets","categoryIncomeByMonth","calculateCategoryIncomeTotals","generateMonthlyIncomeCategoryBreakdown","generateMonthlyIncomeCategoryDatasets","balanceAsNumber","setCurrentBalance","handleCurrentBalanceChange","setOtherSavingsBalance","handleOtherSavingsBalanceChange","goalAsNumber","setSavingGoal","handleSavingGoalChange","min","step","rateAsNumber","setInterestRate","handleInterestRateChange","generateCategoryMappingFromTransactionArray","referenceString","processText","text","replace","split","word","App","downloadMappingRef","storedCategoryMappings","state","setState","routeState","setRouteState","transactionDisplayLimit","filterState","setFilterState","predict","setPredict","newState","savedState","localStorage","getItem","parsedSavedState","JSON","parse","retrieveStateFromLocalStorage","createPredictiveModel","href","newRoute","renderContent","setStateWithPersistence","appState","saveState","entries","setItem","stringify","saveStateToLocalStorage","url","d3","then","processedTransactions","t","convertedAmount","toDate","valueOf","processTransactionArray","categorisedTransactions","categoryMap","resetFilterState","export_data","encodeURIComponent","downloadFileName","Date","toLocaleString","aLink","download","file","fileReader","FileReader","onload","applyCategoryMappingsToTransactions","console","log","readAsText","newGoal","newRate","newFilterState","newValue","newBool","newCategoryMappings","newSortBy","model","analysisData","transactionType","words","createTextAnalysisDataFromTransactionList","includes","getCategoryList","categoryProbabilities","frequencyMap","generateCategoryFrequencies","wordList","innerReducer","existingWord","newCount","count","buildFeatureList","condProbMap","featureList","categoryOccurrenceCount","countMap","forEach","feature","getCategoryOccurrencesForEachWord","filteredByCategory","categoryTotal","adjustedWordFrequency","buildConditionalProbabilityMap","transactionTypes","buildTransactionTypeList","transCondProbMap","transactionTypeList","transactionTypeFrequency","buildTransactionTypeConditionalProbabilityMap","dataToPredict","catProbability","wordProbabilities","helper","strings","probability","newProbability","transactionTypeProbabilities","buildPredictiveModel","trans","convertedTransaction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d66ea968.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport Chance from 'chance';\n\nfunction TransactionListControls (props) {\n\n    const importCategoryMappingRef = useRef(null);\n    const chance = new Chance();\n\n    return (\n      <div className=\"transaction-list-controls-container\">\n            <div className=\"transaction-list-controls\">\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleClearTransactionsClick(e)}>Clear transactions</button>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleExportCategoriesClick(e)}>Export transaction categories</button>\n              <input className=\"hidden-input\" onChange={(e) => handleCategoryMappingImportInputChange(e)} ref={importCategoryMappingRef} type=\"file\" accept=\".json\"/>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleImportCategoriesClick(e)}>Import transaction categories</button>\n            </div>\n            <div className=\"transaction-list-controls\">\n              <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Show only uncategorised</label>\n                  <input type=\"checkbox\" checked={props.filterClassified} onChange={(e) => handleFilterClassifiedChange(e)}/>\n                </div>\n                {props.filterClassified \n                  ? null\n                  : <div className=\"filter-control\">\n                      <label htmlFor=\"\">Filter by category</label>\n                      <select value={props.filterByCategory} onChange={(e) => handleFilterCategoryChange(e)}>\n                          <option value=\"\">None</option>\n                          {props.categoryList.map(item => <option key={chance.string({length: 16})} value={item}>{item}</option>)}\n                      </select>\n                    </div>\n                }\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Filter by transaction type</label>\n                  <select value={props.filterByTransactionType} onChange={(e) => handleFilterTransactionTypeChange(e)}>\n                      <option value=\"\">None</option>\n                      <option value=\"Expenditure\">Expenditure</option>\n                      <option value=\"Income\">Income</option>\n                  </select>\n                </div>\n              </form>\n            </div>\n          </div>\n    );\n\n  function handleCategoryMappingImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      props.importCategoryMappings(files[0]);\n    }\n  }\n\n  function handleClearTransactionsClick(event) {\n    event.preventDefault();\n    props.clearTransactions();\n  }\n\n  function handleExportCategoriesClick(event) {\n    event.preventDefault();\n    props.generateCategoryMapping();\n  }\n\n  function handleImportCategoriesClick(event) {\n    event.preventDefault();\n    importCategoryMappingRef.current.click();\n  }\n\n  function handleFilterClassifiedChange(event) {\n    props.setFilterClassified(event.target.checked);\n  }\n\n  function handleFilterCategoryChange(event) {\n    props.setCategoryFilter(event.target.value);\n  }\n\n  function handleFilterTransactionTypeChange(event) {\n    props.setTransactionTypeFilter(event.target.value);\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n}\n\nexport default TransactionListControls;\n","import React, { useState} from 'react';\n\nfunction CategoryEditor (props) {\n\n  const [editingCategory, setEditingCategory] = useState(false);\n\n  const [enteringCategoryName, setEnteringCategoryName] = useState(\"\");\n\n    if(editingCategory) {\n     const prediction = props.getPrediction(props.transaction.id);\n     return <div className=\"category-editor\">\n            {enteringCategoryName.length === 0 && props.categoryList.length > 0\n                ?\n                <div className=\"category-editor-control pure-form\">\n                    <b>Select a category</b>\n                    <select value={props.category} onChange={(e) => selectCategoryChange(e)}>\n                        <option value=\"Undefined\">None</option>\n                        {props.categoryList.map(item => <option key={item + \" \" + props.transaction.id} value={item}>{item}</option>)}\n                    </select>\n                </div>\n                : null\n            }\n            <div className=\"category-editor-control pure-form\">\n                <b>Create a new category</b>\n                <input value={enteringCategoryName} onChange={(e) => handleEditCategoryName(e)} type=\"text\" placeholder=\"Enter category name\"/>\n            </div>\n            {enteringCategoryName.length > 0\n              ? <button onClick={(e) => saveCategoryClick(e)} className=\"pure-button pure-button-primary\">Save category</button>\n              : null\n            }\n            {prediction && prediction[0]\n              ? <div className=\"category-editor-control pure-form\">\n                  <b>Suggestion: {prediction[0].category}</b>\n                  <button className=\"pure-button pure-button-primary\" onClick={() => confirmPredictedCategory(prediction[0].category)}>Confirm</button>\n                </div>\n              : null\n            }\n            <div className=\"category-editor-button-spacer\"></div>\n            <button onClick={(e) => handleCancelEditingClick(e)} className=\"pure-button\">Cancel</button>\n      </div>\n    }\n    else {\n      return <div className=\"category-editor\">\n                {props.category !== \"Undefined\" \n                  ? <div className=\"category-editor\">\n                      <div className=\"category-name\">\n                          {props.category}\n                      </div>\n                      <button onClick={(e) => setCategoryEditing(true, e)} className=\"pure-button\">Edit category</button>\n                  </div>\n                  : <div className=\"category-editor\">\n                      <button onClick={(e)=> setCategoryEditing(true, e)} className=\"pure-button pure-button-primary\">Add category</button>\n                  </div>\n                }\n            </div>\n  } \n\n  function handleEditCategoryName(event) {\n    setEnteringCategoryName(event.target.value);\n  }\n\n  function setCategoryEditing(bool, event) {\n    setEditingCategory(bool)\n  }\n\n  function selectCategoryChange(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, event.target.value);\n    resetState();\n  }\n\n  function confirmPredictedCategory(category) {\n    props.updateCategoryForMatchingItems(props.transaction.id, category);\n    resetState();\n  }\n\n  function saveCategoryClick(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, enteringCategoryName);\n    resetState();\n  }\n\n  function resetState() {\n    setEditingCategory(false);\n    setEnteringCategoryName(\"\")\n  }\n\n  function handleCancelEditingClick(event) {\n    event.preventDefault();\n    resetState();\n  }\n}\n\nexport default CategoryEditor;\n","import React, { useState } from 'react';\n\nfunction DeleteControl(props) {\n\n  const [confirmDelete, setConfirmDelete] = useState(false);\n\n  return (\n    <div className=\"delete-control\">\n      {confirmDelete\n          ? <div className=\"confirm-delete-container\">\n              <p><b>Delete?</b></p>\n              <button \n                  onClick={(e) => handleConfirmDeleteButtonClick(e)} \n                  className=\"pure-button pure-button-primary\">Yes</button>\n               <button \n                  onClick={(e) => handleCancelDeleteButtonClick(e)} \n                  className=\"pure-button\">No</button>\n            </div>\n          : <i onClick={(e) => handleDeleteIconClick(e)} \n              className=\"fas fa-times delete-icon\">\n              </i>\n      }\n    </div>\n  );\n\n  function handleDeleteIconClick(event) {\n    setConfirmDelete(true);\n  }\n\n  function handleConfirmDeleteButtonClick(event) {\n    event.preventDefault();\n    props.deleteTransaction(props.transactionId);\n    setConfirmDelete(false);\n  }\n\n  function handleCancelDeleteButtonClick(event) {\n    event.preventDefault();\n    setConfirmDelete(false);\n  }\n}\n\nexport default DeleteControl;\n","import React from 'react';\nimport CategoryEditor from './CategoryEditor/CategoryEditor';\nimport DeleteControl from './DeleteControl/DeleteControl';\n\nfunction TransactionRow (props) {\n    return (\n      <div className=\"transaction-row\">\n        <DeleteControl \n            deleteTransaction={props.deleteTransaction}\n            transactionId={props.transaction.id}\n            stateOwner={props.stateOwner}/>\n        <div className=\"transaction-data-container\">\n        \t<div className=\"transaction-data-head\">\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n                        <b>Counterparty</b>\n                    </div>\n                    <div className=\"transaction-text\">\n        \t\t\t {props.transaction[\"Beguenstigter/Zahlungspflichtiger\"]}\n                    </div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t<b>Amount</b>\n        \t\t\t</div>\n        \t\t\t<div className={props.transaction[\"amount\"] >= 0 ? \"transaction-text\" : \"transaction-text negative\"}>\n        \t\t\t\t{props.transaction[\"Waehrung\"]}: {props.transaction[\"amount\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t</div>\n        \t<div  className=\"transaction-data-body\">\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Date</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstag\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>IBAN</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Kontonummer/IBAN\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Transaction type</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstext\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t</div>\n        </div>\n        <div className=\"transaction-category-container\">\n            <CategoryEditor \n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                transaction={props.transaction} \n                category={props.transaction[\"category\"]} \n                categoryList={props.categoryList}\n                getPrediction={props.getPrediction}\n            />\n        </div>\n      </div>\n    );\n}\n\nexport default TransactionRow;\n","import React from 'react';\n\nfunction SortMenu (props) {\n\n    return (\n      <div className=\"pure-menu pure-menu-horizontal\">\n        <ul className=\"pure-menu-list\">\n            <li className=\"pure-menu-item\">{renderDate()}</li>\n            <li className=\"pure-menu-item\">{renderAmount()}</li>\n        </ul>\n      </div>\n    );\n\n    function renderDate() {\n      switch(props.sortBy) {\n        case \"DATE_ASC\":\n          return <div \n          onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" \n            ? props.setSortBy(\"DATE_ASC\") \n            : props.setSortBy(\"DATE_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-up\"/></span></div>\n        case \"DATE_DESC\":\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_ASC\")} className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_DESC\")} className=\"pure-menu-link\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n      }\n    }\n\n    function renderAmount() {\n       switch(props.sortBy) {\n        case \"AMT_ASC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_ASC\") \n            : props.setSortBy(\"AMT_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-up\"></i></span></div>\n        case \"AMT_DESC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n      }\n    }\n}\n\nexport default SortMenu;\n","import React from 'react';\nimport TransactionRow from './TransactionRow/TransactionRow';\nimport SortMenu from './SortMenu/SortMenu';\n\nfunction TransactionList (props) {\n\n    return <div className=\"transaction-list\">\n          {props.sortedTransactions.length > 0 \n            ? <SortMenu setSortBy={props.setSortBy} sortBy={props.sortBy}/>\n            : null\n          }\n          {props.sortedTransactions.length > 0 \n            ? <p>Displaying {props.sortedTransactions.slice(0, props.displayLimit).length} of {props.transactionLength} total transactions</p>\n            : null\n          }\n          {props.sortedTransactions.slice(0, props.displayLimit).map((transaction) => {\n              return <TransactionRow \n                deleteTransaction={props.deleteTransaction} \n                categoryList={props.categoryList} \n                key={transaction.id} \n                transaction={transaction}\n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                getPrediction={props.getPrediction}\n              />\n          })}\n        </div>\n  }\n\nexport default TransactionList;\n","import React, { useRef } from 'react';\nimport moment from 'moment';\nimport TransactionListControls from './TransactionListControls/TransactionListControls';\nimport TransactionList from './TransactionList/TransactionList';\n\nfunction Transactions (props) {\n\n  const uploadFileRef = useRef(null);\n  const categoryList = generateCategoryListDynamically({transactions: props.transactions});\n  const filteredTransactions = filterTransactions({transactions: props.transactions, filterClassified: props.filterClassified, filterByCategory: props.filterByCategory, filterByTransactionType: props.filterByTransactionType})\n  const sortedTransactions = sortTransactions({sortBy: props.sortBy, transactions: filteredTransactions});\n\n    return (\n      <div className=\"transactions-container\">\n        <h2>Transactions</h2>\n        {\n          props.transactions.length > 0 \n          ?\n          <TransactionListControls \n            categoryList={categoryList}\n            filterClassified={props.filterClassified}\n            setCategoryFilter={props.setCategoryFilter}\n            setTransactionTypeFilter={props.setTransactionTypeFilter}\n            filterByCategory={props.filterByCategory}\n            filterByTransactionType={props.filterByTransactionType}\n            clearTransactions = {props.clearTransactions}\n            generateCategoryMapping = {props.generateCategoryMapping}\n            importCategoryMappings= {props.importCategoryMappings}\n            setFilterClassified = {props.setFilterClassified}\n          />\n          :\n          <div>\n            <p>Import your transactions</p>\n            <input className=\"hidden-input\" onChange={(e) => handleImportInputChange(e)} ref={uploadFileRef} type=\"file\" accept=\".csv\"/>\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleImportButtonClick(e)}>Click to import</button>\n          </div>\n        }\n        <TransactionList \n          sortedTransactions={sortedTransactions}\n          setSortBy={props.setSortBy}\n          sortBy={props.sortBy}\n          displayLimit={props.displayLimit}\n          transactionLength={props.transactions.length}\n          deleteTransaction={props.deleteTransaction} \n          updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n          categoryList={categoryList}\n          getPrediction={props.getPrediction}\n        />\n        {\n          sortedTransactions.length > (props.displayLimit) \n          ? \n          <div className=\"more-button-container\">\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleShowMoreClick(e)}>Show more</button>\n          </div>\n          : \n          null\n        }\n      </div>\n    );\n  \n  // Extracts alphabetical list of categories from the transaction list to build drop down options\n  function generateCategoryListDynamically({transactions}) {\n    const reducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category}) && current.category !== \"Undefined\") {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    return transactions.reduce(reducer, []).sort();\n  }\n\n  // Apply transaction filters sequentially (if they are set)\n  function filterTransactions({transactions, filterClassified, filterByCategory, filterByTransactionType}) {\n    const filteredOutClassified = filterClassified ? transactions.filter((item) => {\n      return item.category === \"Undefined\";\n    }) : transactions;\n\n    const filtererdByCategoryTransactions = filterByCategory !== \"\" ? filteredOutClassified.filter((item) => {\n      return item.category === filterByCategory;\n    }) : filteredOutClassified;\n\n    const filteredByTypeTransactions = filterByTransactionType !== \"\" ? filtererdByCategoryTransactions.filter((item) => {\n        if (filterByTransactionType === \"Income\") {\n          return item[\"amount\"] >= 0\n        }\n        else if (filterByTransactionType === \"Expenditure\") {\n          return item[\"amount\"] < 0\n        }\n        else {\n          return item\n        }\n    }) : filtererdByCategoryTransactions;\n\n    return filteredByTypeTransactions;\n  }\n\n  // Sort transactions according to date or amount criteria (ascending or descending)\n  function sortTransactions({sortBy, transactions}) {\n    return transactions.concat([]).sort((a, b) => {\n    const dateA = moment(a.bookingDate);\n    const dateB = moment(b.bookingDate);\n    switch(props.sortBy) {\n      case \"DATE_ASC\":\n        if(dateA.isBefore(dateB)) {\n          return -1;\n        }\n        else if(dateB.isBefore(dateA)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"DATE_DESC\":\n        if(dateB.isBefore(dateA)) {\n          return -1;\n        }\n        else if(dateA.isBefore(dateB)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"AMT_ASC\":\n        return a.amount-b.amount;\n      case \"AMT_DESC\":\n        return b.amount-a.amount;\n      default:\n        return moment(b.bookingDate).utc();\n    }\n  })\n  }\n\n  // Click handler for the file import button (sends click to hidden file input)\n  function handleImportButtonClick(event) {\n    event.preventDefault();\n    uploadFileRef.current.click();\n  }\n\n  // Handles CSV file upload\n  function handleImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const fileURL = window.URL.createObjectURL(files[0]);\n      props.importTransactions(fileURL);\n    }\n  }\n\n  // Handler for the button to show more transactions\n  function handleShowMoreClick(event) {\n    event.preventDefault();\n    props.showMoreTransactions();\n  }\n\n}\n\nexport default Transactions;\n","import React from 'react';\n\nfunction MenuBar (props) {\n    \n    return (\n        <div className=\"management-panel-menu-bar\">\n            <div onClick={(e) => handleMenuItemClick(\"Transactions\", e)}\n                className={props.route === \"Transactions\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Transactions</div>\n                <i className=\"far fa-list-alt fa-1x\"></i>\n            </div>\n            <div onClick={(e) => handleMenuItemClick(\"Reports\", e)}\n                className={props.route === \"Reports\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Reports</div>\n                <i className=\"far fa-chart-bar fa-1x\"></i>\n            </div>\n        </div>\n    );\n\n    function handleMenuItemClick(route, event) {\n        props.setRoute(route);\n    }\n};\n\nexport default MenuBar;","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction IncomeExpenditureByMonthChart (props) {\n\n  const incomeExpenditureByMonthCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n\n      const canvas = incomeExpenditureByMonthCanvas.current;\n\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n\n      const datasets = [{\n            label: 'Income',\n            data: props.data.map(item => item.income),\n            backgroundColor: '#000000'\n        }, \n        {\n            label: 'Expenditure',\n            data: props.data.map(item => item.expenditure),\n            backgroundColor: '#ff0000'\n        }, \n        {\n            label: 'Net savings',\n            data: props.data.map(item => item.total),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Income versus Expenditure by Month</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={incomeExpenditureByMonthCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default IncomeExpenditureByMonthChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction CumulativeSavingsChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n\n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      } \n      const canvas = savingTrajectoryCanvas.current;\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n      const datasets = [\n        {\n            label: 'Cumulative savings',\n            data: props.data.map(item => item.savedTotal),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Cumulative Savings</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={savingTrajectoryCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default CumulativeSavingsChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction ExpenditureByCategoryChart (props) {\n\n  const expenditureByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n      const canvas = expenditureByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n       });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Expenditure by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={expenditureByCategoryCanvas}></canvas>\n              </div>\n            </div>\n}\n\nexport default ExpenditureByCategoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport regression from 'regression';\n\nfunction SavingTrajectoryChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n    if(savedChart.current){\n      savedChart.current.destroy();\n    }\n    const data = generateSavingsProjection(props.data, props.currentBalance, props.savingGoal, props.interestRate)\n    const canvas = savingTrajectoryCanvas.current;\n    const labels = data.map(item => (\"Year \" + item.year));\n    const savingGoal = props.savingGoal;\n    if(props.savingGoal) {\n      renderChart(data, canvas, labels, savingGoal, savedChart, props.interestRate)\n    }\n  });\n\n    return    <div className=\"chart-panel\">\n                <h4>Savings Projection</h4>\n                <div className=\"chart-container\">\n                  {props.savingGoal\n                    ? <canvas ref={savingTrajectoryCanvas}></canvas>\n                    : <div>You need to provide a saving goal</div>\n                  }\n                </div>\n              </div>\n\n}\n\nfunction renderChart(data, canvas, labels, savingGoal, savedChart, interestRate) {\n    const datasets = [\n        {\n            label: 'Projected savings',\n            data: data.map(item => item.balance),\n            backgroundColor: '#000000',\n            borderColor: '#000000',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: `With ${interestRate}% interest`,\n            data: data.map(item => item.balanceWithInterest),\n            backgroundColor: '#D3D3D3',\n            borderColor: '#D3D3D3',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: 'Savings goal',\n            data: data.map(item => savingGoal),\n            borderColor: '#ff0000',\n            backgroundColor: '#ff0000',\n            type: 'line',\n            fill: false,\n            pointRadius: 0\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true,\n                        max: Math.round((parseFloat(savingGoal) * 1.1))\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true,\n            animation: false\n        }\n      });\n\n      savedChart.current = chart;\n}\n\n// Generate chart data for future projected saving\nfunction generateSavingsProjection(data, currentBalance, savingGoal, interestRate) {\n\n  const maxYears = 50;\n\n  const regression = generateSavingsRegression(data);\n\n  const savingRate = regression.equation[0] * 12;\n  const result = project(currentBalance, savingRate, maxYears, savingGoal, interestRate);\n  return result;\n}\n\n// Linear regression on the current cumulative savings trend\nfunction generateSavingsRegression (data) {\n  const accumulateReducer = (accumulator, current) => {\n    let newTotal;\n    if (accumulator.length > 0) {\n      newTotal = accumulator[accumulator.length - 1] + current.total;\n      return accumulator.concat([newTotal]);\n    }\n    else {\n      return accumulator.concat([current.total]);\n    }\n  };\n  const cumulativeSavings = data.reduce(accumulateReducer, [0.0])\n  const dataForRegression = cumulativeSavings.map((item, index) => {\n    return [index, item]\n  });\n  const result = regression.linear(dataForRegression);\n  return result;\n}\n\n// Recursive function to project when cumulative savings will exceed target, given trend\nfunction project(balance, savingRate, maxYears, savingGoal, interestRate) {\n  const counter = 0;\n  const interestPercentage = interestRate === 0 ? 0 : (interestRate / 100);\n  const result = [{year: counter, balance: balance, balanceWithInterest: balance}];\n  return projectHelper(balance, balance, savingRate, maxYears, savingGoal, interestPercentage, counter, result);\n}\n\nfunction projectHelper(balance, balanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, counter, result) {\n  if(counter === maxYears || balance > savingGoal) {\n    return result;\n  }\n  else {\n    const newBalance = balance + savingRate;\n    const newBalanceWithInterest = Math.round(balanceWithInterest + (balanceWithInterest * interestPercentage) + savingRate);\n\n    const newCounter = counter + 1;\n    const newResult = result.concat({year: newCounter, balance: newBalance, balanceWithInterest: newBalanceWithInterest});\n    return projectHelper(newBalance, newBalanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, newCounter, newResult);\n  }\n}\n\n\nexport default SavingTrajectoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction IncomeByCategoryChart (props) {\n\n  const incomeByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n    const canvas = incomeByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Income by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={incomeByCategoryCanvas}></canvas>\n              </div>\n            </div>\n\n}\n\nexport default IncomeByCategoryChart;\n","import React, { useMemo } from 'react';\nimport IncomeExpenditureByMonthChart from './IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart';\nimport CumulativeSavingsChart from './CumulativeSavingsChart/CumulativeSavingsChart';\nimport ExpenditureByCategoryChart from './ExpenditureByCategoryChart/ExpenditureByCategoryChart';\nimport SavingTrajectoryChart from './SavingTrajectoryChart/SavingTrajectoryChart';\nimport IncomeByCategoryChart from './IncomeByCategoryChart/IncomeByCategoryChart';\nimport moment from 'moment';\n\nfunction Reports (props) {\n\n    const currentSavings = getCurrentSavings();\n    const savingGoal = getSavingGoal();\n    const interestRate = getInterestRate();\n\n    const monthlyBreakdown = useMemo(\n      () => calculateIncomeAndExpenditureByMonth(props.transactions), [props.transactions]\n    );\n    const monthData = Array.prototype.concat.apply([], Array.from(monthlyBreakdown.values()).map(item => Array.from(item.values())));\n    const periodSummary = useMemo(\n      () => summariseMonthlyData(monthData, currentSavings, savingGoal), [monthData, currentSavings, savingGoal]\n    );\n    const savingsTrajectory = useMemo(\n      () => calculateSavingTrajectoryByMonth(monthData, currentSavings), [monthData, currentSavings]\n    );\n    const categories = useMemo(\n      () => extractTransactionCategories(props.transactions), [props.transactions]\n    );\n    const categoryExpenditureByMonth = useMemo(\n      () => generateMonthlyCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n    const categoryIncomeByMonth = useMemo(\n      () => generateMonthlyIncomeCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n\n    return <div className=\"reports-container\">\n              <h2>Reports</h2>\n              <div className=\"transaction-list-controls\">\n                <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Current balance (EUR)</label>\n                    <input type=\"number\" value={props.currentBalance} onChange={(e) => handleCurrentBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Other savings (EUR)</label>\n                    <input type=\"number\" value={props.otherSavingsBalance} onChange={(e) => handleOtherSavingsBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Saving goal (EUR)</label>\n                    <input type=\"number\" value={props.savingGoal} onChange={(e) => handleSavingGoalChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Interest rate (%)</label>\n                    <div className=\"interest-rate-slider\">\n                      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={props.interestRate} onChange={(e) => handleInterestRateChange(e)}/>\n                      <div className=\"rate-display\">{props.interestRate}%</div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n\n              <div className=\"chart-panel\">\n                <h4>Saving summary</h4>\n                <div className=\"stat-container\">\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.totalSaving}</div>\n                    <div className=\"stat-text\">Saved during period</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.averageSaving}</div>\n                    <div className=\"stat-text\">Average monthly saving</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">{periodSummary.percentSaved} %</div>\n                    <div className=\"stat-text\">Towards savings target</div>\n                  </div>\n                </div>\n              </div>\n\n              <IncomeExpenditureByMonthChart data={monthData}/>\n\n              <CumulativeSavingsChart  data={savingsTrajectory}/>\n\n              <SavingTrajectoryChart \n                data={monthData} \n                currentBalance={currentSavings}\n                savingGoal={savingGoal}\n                interestRate={interestRate}\n              />\n              <ExpenditureByCategoryChart data={categoryExpenditureByMonth}/>\n              <IncomeByCategoryChart data={categoryIncomeByMonth}/>\n            </div>\n\n  function handleSavingGoalChange(event) {\n    event.preventDefault();\n    const goalAsNumber = Number(event.target.value);\n    if (!isNaN(goalAsNumber) || goalAsNumber === \"\") {\n      props.setSavingGoal(event.target.value);\n    }\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n\n  function handleCurrentBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setCurrentBalance(event.target.value);\n    }      \n  }\n\n  function handleOtherSavingsBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setOtherSavingsBalance(event.target.value);\n    }      \n  }\n\n  function handleInterestRateChange(event) {\n    event.preventDefault();\n    const rateAsNumber = Number(event.target.value);\n    if (!isNaN(rateAsNumber) || rateAsNumber === \"\") {\n      props.setInterestRate(event.target.value);\n    }      \n  }\n\n  function getCurrentSavings() {\n    const accountSavings = isNaN(parseFloat(props.currentBalance)) ? 0 : parseFloat(props.currentBalance);\n    const otherSavings = isNaN(parseFloat(props.otherSavingsBalance)) ? 0 : parseFloat(props.otherSavingsBalance);\n    return accountSavings + otherSavings;\n  }\n\n  function getSavingGoal() {\n    return isNaN(parseFloat(props.savingGoal)) ? 0 : parseFloat(props.savingGoal);\n  }\n\n  function getInterestRate() {\n    return isNaN(parseFloat(props.interestRate)) ? 0 : parseFloat(props.interestRate);\n  }\n}\n\n\n\nfunction calculateIncomeAndExpenditureByMonth(transactions) {\n  const reducer = (accumulator, current) => {\n    \n      const month = moment(current.bookingDate).month();\n      const year =  moment(current.bookingDate).year();\n      const amount = parseFloat(current.amount);\n\n      if (accumulator.get(year)) {\n        const accYear = accumulator.get(year);\n        if (accYear.get(month)) {\n          const previousMonth = accYear.get(month);\n          const previousIncome = previousMonth.income;\n          const previousExpenditure = previousMonth.expenditure;\n          const previousTotal = previousMonth.total;\n          const newTransactions = previousMonth.transactions.concat([current])\n          const newMonthValue = amount >= 0.00 \n            ? {...previousMonth, income: round((previousIncome + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions} \n            : {...previousMonth, expenditure: round((previousExpenditure + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions};\n          accYear.set(month, newMonthValue);\n        }\n        else {\n          const newMonthValue = amount >= 0.00\n          ? {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current]}\n          : {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current]}\n          accumulator.get(year).set(month, newMonthValue);\n        }\n      }\n      else {\n        const newMonthValue = amount >= 0.00\n        ? {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current]}\n        : {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current]}\n\n        accumulator.set(year, new Map());\n        accumulator.get(year).set(month, newMonthValue);\n      }\n\n      return accumulator\n  }\n\n  const result = transactions.reduce(reducer, new Map());\n  return result;\n}\n\nfunction summariseMonthlyData(monthData, currentBalance, savingGoal) {\n  const savingReducer = (accumulator, current, index) => {\n    return accumulator + current.total\n  }\n\n  const totalSaving = monthData.reduce(savingReducer, 0.0).toFixed(2);\n  const totalMonths = monthData.length;\n  const averageSaving = monthData.length > 0 ? (totalSaving / totalMonths).toFixed(2) : 0.0;\n  const percentSaved = savingGoal && currentBalance && savingGoal > 0.0 ? ((currentBalance / savingGoal) * 100).toFixed(1) : 0.0;\n  return {totalSaving: totalSaving, averageSaving: averageSaving, percentSaved: percentSaved};\n} \n\nfunction round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nfunction calculateSavingTrajectoryByMonth(array, currentBalance) {\n\n  const totalSavingsReducer = (accumulator, current) => {\n    return accumulator + current.total;\n  }\n\n  const totalCumulativeSavings = array.reduce(totalSavingsReducer, 0.00);\n\n  const floatValue = currentBalance - totalCumulativeSavings;\n\n  const reducer = (accumulator, current, index) => {\n    if (accumulator.length === 0) {\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((current.total + floatValue), 2)}]);\n    }\n    else {\n        const previousSaved = accumulator[accumulator.length-1].savedTotal;\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((previousSaved + current.total), 2)}]);\n    }\n  }\n  return array.reduce(reducer, [])\n}\n\nfunction extractTransactionCategories(transactions) {\n  const categoryReducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category})) {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    const categoryList = transactions.reduce(categoryReducer, []).sort();\n    return categoryList;\n}\n\nfunction convertCategoriesToMap(categories) {\n  const cats = categories.map((category) => {return [category, 0.00]});\n  return new Map(cats);\n}\n\n\n\nfunction calculateCategoryExpenditureTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount < 0) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryExpenditureTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (0.0 - monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nfunction calculateCategoryIncomeTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount > 0) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryIncomeTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyIncomeCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nexport default Reports;\n","import React, {useRef, useState, useEffect} from 'react';\nimport Transactions from './Transactions/Transactions';\nimport MenuBar from './MenuBar/MenuBar';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport Chance from 'chance';\nimport Reports from './Reports/Reports';\n\nfunction App(props) {\n  \n  const downloadMappingRef = useRef(null);\n\n  // Transaction data state\n  const [state, setState] = useState({\n    transactions: [],\n    currentBalance: \"\",\n    otherSavingsBalance: \"0\",\n    savingGoal: \"\",\n    interestRate: \"0\",\n    storedCategoryMappings: new Map()\n  });\n\n  // Routing between tabs\n  const [routeState, setRouteState] = useState(\"Transactions\");\n\n  // Transaction view filter state\n  const [filterState, setFilterState] = useState({\n    transactionDisplayLimit: 50,\n    filterClassified: false,\n    filterByCategory: \"\",\n    filterByTransactionType: \"\",\n    sortBy: \"DATE_DESC\"\n  });\n\n  const [predict, setPredict] = useState(null);\n\n  useEffect(() => {\n    const newState = retrieveStateFromLocalStorage();\n    setState(newState);\n    createPredictiveModel(state.transactions);\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"app-page app-content\">\n        <a className = \"hidden-input\" href=\"hidden\" ref={downloadMappingRef}>Hidden data download link</a>\n        <div className=\"app-header\">\n            <div className=\"app-logo-container\">\n                Saving Analyst\n            </div>\n        </div>\n        <div className=\"app-main-content\">\n            <div className=\"management-panel\">\n                <MenuBar \n                  setRoute={setRoute} \n                  route={routeState}/>\n                <div className=\"management-panel-content\">\n                    {renderContent()}\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n\n  function renderContent() {\n    switch(routeState) {\n      case \"Transactions\":\n        return <Transactions \n                    displayLimit={filterState.transactionDisplayLimit} \n                    transactions={state.transactions} \n                    filterByCategory={filterState.filterByCategory}\n                    filterClassified={filterState.filterClassified}\n                    filterByTransactionType={filterState.filterByTransactionType}\n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    savingGoal={state.savingGoal}\n                    sortBy={state.sortBy}\n                    setSortBy={setSortBy}\n                    importTransactions={importTransactions}\n                    importCategoryMappings={importCategoryMappings}\n                    clearTransactions={clearTransactions}\n                    generateCategoryMapping={generateCategoryMapping}\n                    showMoreTransactions={showMoreTransactions}\n                    setFilterClassified={setFilterClassified}\n                    setCategoryFilter={setCategoryFilter}\n                    setTransactionTypeFilter={setTransactionTypeFilter}\n                    deleteTransaction={deleteTransaction}\n                    updateCategoryForMatchingItems={updateCategoryForMatchingItems}\n                    getPrediction={getPrediction}\n                    />\n      case \"Reports\":\n        return <Reports \n                    state={state}\n                    transactions={state.transactions} \n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    interestRate={state.interestRate}\n                    savingGoal={state.savingGoal}\n                    setSavingGoal={setSavingGoal}\n                    setInterestRate={setInterestRate}\n                    setCurrentBalance={setCurrentBalance}\n                    setOtherSavingsBalance={setOtherSavingsBalance}\n                    />\n      default:\n        return <div>Something went wrong!</div>\n    }\n  }\n\n  // Get state from local storage if it exists or instantiate with empty defaults\n  function retrieveStateFromLocalStorage() {\n    const savedState = window.localStorage.getItem(\"savedState\");\n    const parsedSavedState = savedState ? JSON.parse(savedState) : {};\n    const newState = {\n        ...state,\n        transactions: (savedState ? parsedSavedState.transactions : []),\n        currentBalance: (savedState ? parsedSavedState.currentBalance : \"\"),\n        otherSavingsBalance: (savedState ? parsedSavedState.otherSavingsBalance : \"\"),\n        savingGoal: (savedState ? parsedSavedState.savingGoal : \"\"),\n        interestRate: (savedState ? parsedSavedState.interestRate : \"0\"),\n        storedCategoryMappings: (savedState ? new Map(parsedSavedState.storedCategoryMappings) : new Map())\n    }\n    return newState;\n  }\n\n  // Save state in React state and local storage at same time\n  function setStateWithPersistence(newState) {\n    setState(newState);\n    saveStateToLocalStorage(newState);\n  }\n\n  // Save state to local storage\n  function saveStateToLocalStorage(appState) {\n    const saveState = {\n        transactions: appState.transactions, \n        currentBalance: appState.currentBalance,\n        otherSavingsBalance: appState.otherSavingsBalance,\n        savingGoal: appState.savingGoal,\n        interestRate: appState.interestRate,\n        storedCategoryMappings: Array.from(appState.storedCategoryMappings.entries())\n      }\n    window.localStorage.setItem(\"savedState\", JSON.stringify(saveState));\n  }\n\n  // update the app route\n  function setRoute(newRoute) {\n    setRouteState(newRoute);\n  }\n\n  // process an imported csv file with transaction data ()\n  function importTransactions(url) {\n    d3.csv(url).then((result) => {\n        const processedTransactions = processTransactionArray(result);\n        const categorisedTransactions = mapCategoriesToTransactions(state.storedCategoryMappings, processedTransactions)\n        const newState = {...state, transactions: categorisedTransactions}\n        setStateWithPersistence(newState);\n        createPredictiveModel(categorisedTransactions);\n    });\n  }\n\n  // Reset the transactions and filter state\n  function clearTransactions() {\n\n    const newState = {\n        ...state, \n        transactions: [],\n        currentBalance: \"\",\n        otherSavingsBalance: \"\",\n        savingGoal: \"\",\n        storedCategoryMappings: new Map()\n    }\n    setStateWithPersistence(newState);\n    resetFilterState();\n    setPredict(null);\n  }\n\n  // Remove a transaction from the list\n  function deleteTransaction(transactionId) {\n    const newTransactions = state.transactions.filter((transaction) => {\n      return transaction.id !== transactionId\n    });\n    const newState = {...state, transactions: newTransactions}\n    setStateWithPersistence(newState);\n  }\n\n  // Generate a downloadable file with the mappings from transaction details to category\n  function generateCategoryMapping() {\n    const export_data = \"data:text/json,\" + encodeURIComponent(JSON.stringify(Array.from(generateCategoryMappingFromTransactionArray(state.transactions).entries())));\n    const export_time = new Date().toLocaleString();\n    const downloadFileName = \"data \" + export_time + \".json\";\n    const aLink = downloadMappingRef.current;\n    aLink.href = export_data;\n    aLink.download = downloadFileName;\n    aLink.click();\n  }\n\n  // Read an uploaded category mapping file and apply the categories to all matching transactions\n  function importCategoryMappings(file) {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      try {\n        const result = JSON.parse(fileReader.result);\n        const categoryMap = new Map(result);\n        applyCategoryMappingsToTransactions(categoryMap);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    fileReader.readAsText(file);\n  }\n\n  // Apply categories to matching transactions\n  function applyCategoryMappingsToTransactions(categoryMap) {\n    const newTransactions = state.transactions.map((transaction) => {\n      if (categoryMap.get(transaction.referenceString)) {\n        return {...transaction, category: categoryMap.get(transaction.referenceString)}\n      }\n      else {\n        return {...transaction, transactions: newTransactions, storedCategoryMappings: categoryMap};\n      }\n    });\n    const newState = {...state, transactions: newTransactions}\n    setStateWithPersistence(newState);\n    createPredictiveModel(newTransactions);\n  }\n\n  /*\n    Manage the current balance and saving goal\n  */\n\n  function setCurrentBalance(newBalance) {\n    const newState = {...state, currentBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setOtherSavingsBalance(newBalance) {\n    const newState = {...state, otherSavingsBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setSavingGoal(newGoal) {\n    const newState = {...state, savingGoal: newGoal}\n    setStateWithPersistence(newState);\n  }\n\n  function setInterestRate(newRate) {\n    const newState = {...state, interestRate: newRate}\n    setStateWithPersistence(newState);\n  }\n\n  /*\n    Filter state management functions\n  */\n\n  function showMoreTransactions() {\n    const newFilterState = {...filterState, transactionDisplayLimit: filterState.transactionDisplayLimit + 50}\n    setFilterState(newFilterState);\n  }\n\n  function setCategoryFilter(newValue) {\n    const newFilterState = {...filterState, filterByCategory: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function setFilterClassified(newBool) {\n    const newFilterState = {...filterState, filterClassified: newBool, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setTransactionTypeFilter(newValue) {\n    const newFilterState = {...filterState, filterByTransactionType: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function updateCategoryForMatchingItems(transactionId, category) {\n    const transaction = state.transactions.find((t) => {\n      return t.id === transactionId;\n    });\n\n    if (transaction) {\n      const newTransactions = state.transactions.map((t)=> {\n        if(t.referenceString === transaction.referenceString) {\n          return {...t, category: category}\n        }\n        else {\n          return t;\n        }\n      });\n      const newCategoryMappings = generateCategoryMappingFromTransactionArray(newTransactions);\n      const newState = {...state, transactions: newTransactions, storedCategoryMappings: newCategoryMappings}\n      setStateWithPersistence(newState);\n      resetFilterState();\n      createPredictiveModel(newTransactions);\n    }\n  }\n\n  function resetFilterState() {\n    const newFilterState = {...filterState, transactionDisplayLimit: 50, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setSortBy(newSortBy) {\n    const newState = {...state, sortBy: newSortBy}\n    setState(newState);\n  }\n\n\n\n  function createPredictiveModel(transactions) {\n    const model = buildPredictiveModel(transactions);\n    if(model && typeof model === \"function\") {\n      setPredict(() => model);\n    }\n  }\n\n  function getPrediction(transactionId) {\n    const transaction = state.transactions.find(trans => trans.id === transactionId);\n    const convertedTransaction = {\n      id: transaction.id, \n      words: processText(transaction[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: transaction.category, \n      transactionType: transaction[\"Buchungstext\"]\n    };\n    if (convertedTransaction) {\n      if(typeof predict === \"function\") {\n        const result = predict(convertedTransaction);\n        return result;\n      }\n      else {\n        return {}\n      }\n    }\n    else {\n      return {}\n    }\n\n  }\n}\n\n/*\n  Helper methods for category mapping\n*/\n\nfunction processTransactionArray(transactions) {\n  const chance = new Chance();\n  const processedTransactions = transactions.map((t) => {\n    let referenceString;\n    if (t[\"Beguenstigter/Zahlungspflichtiger\"] !== \"\" && t[\"Kontonummer/IBAN\"] !== \"\") {\n      referenceString = t[\"Beguenstigter/Zahlungspflichtiger\"] + \"%\" + t[\"Kontonummer/IBAN\"];\n    }\n    else {\n      referenceString = t[\"Buchungstext\"];\n    }\n    const id = chance.string({ length: 25 });\n    const bookingDate = moment.utc(t[\"Buchungstag\"], \"DD.MM.YY\");\n    const convertedAmount = t[\"Betrag\"].replace(/,/g, '.');\n    const newT = {...t, id: id, amount: parseFloat(convertedAmount).toFixed(2), referenceString: referenceString, bookingDate: bookingDate.toDate(), category: \"Undefined\"};\n    return newT;\n  })\n\n  return processedTransactions.sort((a, b)=> {return a.bookingDate.valueOf() - b.bookingDate.valueOf()});\n}\n\nfunction generateCategoryMappingFromTransactionArray(transactions) {\n  const reducer = (acc, current) => {\n    if (!acc.get(current.referenceString) && current.category !== \"Undefined\") {\n      acc.set(current.referenceString, current.category);\n      return acc;\n    }\n    else {\n      return acc;\n    }\n  }\n  const categoryMap = transactions.reduce(reducer, new Map());\n  return categoryMap;\n}\n\nfunction mapCategoriesToTransactions(categoryMap, transactions) {\n  const newTransactions = transactions.map((transaction) => {\n    if (categoryMap.get(transaction.referenceString)) {\n      return {...transaction, category: categoryMap.get(transaction.referenceString)}\n    }\n    else {\n      return {...transaction, category: \"Undefined\"};\n    }\n  });\n  return newTransactions\n}\n\n/*\n  Methods for predicting category\n*/\n\nfunction buildPredictiveModel(transactions) {\n\n  const categorised = transactions.filter(item=> item.category !== \"Undefined\");\n\n  const analysisData = createTextAnalysisDataFromTransactionList(categorised);\n\n  const categories = getCategoryList(analysisData);\n\n  const categoryProbabilities = generateCategoryFrequencies(analysisData);\n\n  const wordList = buildFeatureList(analysisData);\n\n  const condProbMap = buildConditionalProbabilityMap(analysisData, wordList, categories);\n\n  const transactionTypes = buildTransactionTypeList(analysisData)\n\n  const transCondProbMap = buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypes, categories)\n\n  return (dataToPredict) => {\n\n    if(dataToPredict && dataToPredict.words) {\n\n      const probabilitiesOfCategory = categories.map(category => {\n\n        function returnWordConditionalProbabilities(strings) {\n          return helper(strings, 1);\n        }\n\n        function helper(strings, probability) {\n          if (strings.length === 0) {\n            return 0;\n          }\n          else if (strings.length === 1) {\n            if(!condProbMap.get(category).get(strings[0])){\n              return probability;\n            }\n            else {\n              return probability * condProbMap.get(category).get(strings[0]);\n            }\n          }\n          else {\n            if(!condProbMap.get(category).get(strings[0])){\n              return helper(strings.slice(1), probability);\n            }\n            else {\n              const newProbability = probability * condProbMap.get(category).get(strings[0]);\n              return helper(strings.slice(1), newProbability);\n            }\n          }\n        }\n\n        const catProbability = categoryProbabilities.get(category)\n        const wordProbabilities = returnWordConditionalProbabilities(dataToPredict.words);\n\n        const transactionTypeProbabilities = transCondProbMap.get(category).get(dataToPredict.transactionType);\n        const totalProbability = catProbability * wordProbabilities * transactionTypeProbabilities;\n\n        return {category: category, probability: totalProbability};\n      }).sort((a, b)=>{return b.probability - a.probability}).slice(0, 1);\n\n      return probabilitiesOfCategory;\n      }\n    else {\n      return {}\n    }\n  }\n    \n}\n\nfunction getCategoryList (analysisData) {\n  const categoryListReducer = (acc, current) => {\n    if(!acc.includes(current.category)) {\n      return acc.concat([current.category]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(categoryListReducer, []);\n}\n\n// Identify the frequency distribution of transactions by category\nfunction generateCategoryFrequencies(analysisData) {\n  const reducer = (acc, current) => {\n      if (acc.has(current.category)) {\n        const newValue = (acc.get(current.category) + 1);\n        acc.set(current.category, newValue);\n        return acc;\n      }\n      else {\n        acc.set(current.category, 1);\n        return acc;\n      }\n  }\n\n  const length = analysisData.length;\n\n  const frequencyMap = analysisData.reduce(reducer, new Map());\n\n  const probabilityMap = new Map(Array.from(frequencyMap).map(item => {return [item[0], (item[1]/length)]}))\n\n  return probabilityMap;\n}\n\nfunction buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypeList, categories) {\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    transactionTypeList.forEach(transactionType => {\n      const hasTransactionType = filteredByCategory.filter(item => item.transactionType === transactionType);\n      \n      const transactionTypeFrequency = (1 + hasTransactionType.length) / categoryTotal;\n      result.get(category).set(transactionType, transactionTypeFrequency);\n    });\n  });\n\n  return result;\n}\n\nfunction buildConditionalProbabilityMap (analysisData, featureList, categories) {\n\n  const getCategoryOccurrencesForEachWord = (analysisData, featureList, categories) => {\n    const countMap = new Map();\n\n    featureList.forEach(feature => {\n      let counter = 0\n\n      categories.forEach(category => {\n        const filteredByCategoryAndWord = analysisData.filter(item => item.category === category && item.words.includes(feature.word));\n        if (filteredByCategoryAndWord.length > 0) {\n          counter ++;\n        }\n      })\n\n      countMap.set(feature.word, counter);\n    })\n\n    return countMap;\n  }\n\n  const categoryOccurrenceCount = getCategoryOccurrencesForEachWord(analysisData, featureList, categories);\n\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    featureList.forEach(feature => {\n      const containsWord = filteredByCategory.filter(item => item.words.includes(feature.word));\n      \n      const wordFrequency = (containsWord.length + 0.01) / categoryTotal;\n      \n      const adjustedWordFrequency = wordFrequency * (1 / categoryOccurrenceCount.get(feature.word))\n\n      result.get(category).set(feature.word, adjustedWordFrequency);\n    })\n  });\n\n  return result;\n}\n\n\nfunction buildTransactionTypeList(analysisData) {\n  const reducer = (acc, current) => {\n    if(!acc.includes(current.transactionType)) {\n      return acc.concat([current.transactionType]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(reducer, []);\n}\n\n// Run through list of analysis data and compile deduplicated list of words\nfunction buildFeatureList(analysisData) {\n  const innerReducer = (acc, word) => {\n    const existingWord = acc.find(item => item.word === word);\n    if(!existingWord) {\n      return acc.concat([{word: word, count: 1}]);\n    }\n    else {\n      const newCount = existingWord.count++;\n      existingWord.count = newCount;\n      return acc;\n    }\n  }\n\n  const outerReducer = (acc, current) => {\n    return current.words.reduce(innerReducer, acc);\n  }\n\n  return analysisData.reduce(outerReducer, [])\n}\n\n// Run through list of transactions and build text analysis data\nfunction createTextAnalysisDataFromTransactionList(transactions) {\n  \n  return transactions.map(t=> {\n    return {\n      id: t.id, \n      transactionType: t[\"Buchungstext\"], \n      words: processText(t[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: t.category}\n    }\n  );\n}\n\n// Create a standardised array of words from the recipient details\nfunction processText(text) {\n  const replaceDoubleSlash = text.replace(/\\/\\//g, \" \");\n  const replaceSingleSlash = replaceDoubleSlash.replace(/\\/\\//g, \" \");\n  const replacePercent = replaceSingleSlash.replace(/%/g, \" \");\n  const replaceDot = replacePercent.replace(/\\./g, \" \");\n  const splitString = replaceDot.split(\" \");\n  const result = splitString.filter(word => word !== \"\");\n  return result;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}