{"version":3,"sources":["Transactions/TransactionListControls/TransactionListControls.js","Transactions/TransactionList/TransactionRow/CategoryEditor/CategoryEditor.js","Transactions/TransactionList/TransactionRow/DeleteControl/DeleteControl.js","Transactions/TransactionList/TransactionRow/TransactionRow.js","Transactions/TransactionList/SortMenu/SortMenu.js","Transactions/TransactionList/TransactionList.js","Transactions/Transactions.js","MenuBar/MenuBar.js","Reports/IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart.js","Reports/CumulativeSavingsChart/CumulativeSavingsChart.js","Reports/ExpenditureByCategoryChart/ExpenditureByCategoryChart.js","Reports/SavingTrajectoryChart/SavingTrajectoryChart.js","Reports/IncomeByCategoryChart/IncomeByCategoryChart.js","Reports/Reports.js","App.js","index.js"],"names":["TransactionListControls","props","importCategoryMappingRef","useRef","chance","Chance","className","onClick","e","preventDefault","clearTransactions","generateCategoryMapping","onChange","event","files","target","length","importCategoryMappings","handleCategoryMappingImportInputChange","ref","type","accept","current","click","onSubmit","htmlFor","checked","filterClassified","handleFilterClassifiedChange","setFilterClassified","value","filterByCategory","handleFilterCategoryChange","setCategoryFilter","categoryList","map","item","key","string","filterByTransactionType","handleFilterTransactionTypeChange","setTransactionTypeFilter","filterBySavingsTransfer","handleFilterSavingsTransferChange","setSavingsTransferFilter","CategoryEditor","useState","editingCategory","setEditingCategory","enteringCategoryName","setEnteringCategoryName","prediction","getPrediction","transaction","id","category","selectCategoryChange","updateCategoryForMatchingItems","resetState","placeholder","confirmPredictedCategory","setCategoryEditing","bool","DeleteControl","confirmDelete","setConfirmDelete","deleteTransaction","transactionId","TransactionRow","stateOwner","isSaving","updateTransactionIsSaving","handleIsSavingChange","SortMenu","sortBy","setSortBy","renderDate","renderAmount","TransactionList","sortedTransactions","slice","displayLimit","transactionLength","Transactions","uploadFileRef","transactions","reduce","acc","find","concat","sort","generateCategoryListDynamically","filteredTransactions","filteredOutClassified","filter","filtererdByCategoryTransactions","filteredByTypeTransactions","filterTransactions","a","b","dateA","moment","bookingDate","dateB","isBefore","amount","utc","sortTransactions","fileURL","window","URL","createObjectURL","importTransactions","handleImportInputChange","showMoreTransactions","MenuBar","handleMenuItemClick","route","setRoute","IncomeExpenditureByMonthChart","incomeExpenditureByMonthCanvas","savedChart","useEffect","destroy","canvas","labels","data","month","year","datasets","label","income","backgroundColor","expenditure","total","pointRadius","ctx","getContext","chart","Chart","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","responsive","CumulativeSavingsChart","savingTrajectoryCanvas","savedTotal","ExpenditureByCategoryChart","expenditureByCategoryCanvas","months","colors","palette","index","xAxes","stacked","SavingTrajectoryChart","currentBalance","savingGoal","interestRate","savingRate","dataForRegression","accumulator","newTotal","regression","linear","generateSavingsRegression","equation","balance","maxYears","projectHelper","balanceWithInterest","interestPercentage","counter","result","newBalance","newBalanceWithInterest","Math","round","newCounter","newResult","project","generateSavingsProjection","borderColor","fill","lineTension","max","parseFloat","animation","renderChart","IncomeByCategoryChart","incomeByCategoryCanvas","decimals","Number","convertCategoriesToMap","categories","cats","Map","Reports","currentSavings","accountSavings","isNaN","otherSavings","otherSavingsBalance","getCurrentSavings","monthlyBreakdown","useMemo","transferred","newMonthValue","get","accYear","previousMonth","previousIncome","previousExpenditure","previousTotal","newTransactions","previousTransferred","set","monthData","Array","prototype","apply","from","values","periodSummary","totalSaving","toFixed","totalMonths","averageSaving","percentSaved","summariseMonthlyData","savingsTrajectory","array","totalCumulativeSavings","totalTransferred","floatValue","previousSaved","calculateSavingTrajectoryByMonth","categoryExpenditureByMonth","transactionsByMonth","monthlyCategories","initialValue","has","calculateCategoryExpenditureTotals","generateMonthlyCategoryBreakdown","montlyTotaller","filteredCategoryDatasets","noExpenditures","every","dataPoint","generateMonthlyCategoryDatasets","categoryIncomeByMonth","calculateCategoryIncomeTotals","generateMonthlyIncomeCategoryBreakdown","generateMonthlyIncomeCategoryDatasets","balanceAsNumber","setCurrentBalance","handleCurrentBalanceChange","setOtherSavingsBalance","handleOtherSavingsBalanceChange","goalAsNumber","setSavingGoal","handleSavingGoalChange","min","step","rateAsNumber","setInterestRate","handleInterestRateChange","generateCategoryMappingFromTransactionArray","referenceString","generateSavingTransferMappingFromTransactionArray","date","JSON","stringify","processText","text","replace","split","word","App","downloadMappingRef","storedCategoryMappings","state","setState","routeState","setRouteState","transactionDisplayLimit","filterState","setFilterState","predict","setPredict","newState","savedState","localStorage","getItem","parsedSavedState","parse","console","log","message","retrieveStateFromLocalStorage","createPredictiveModel","href","newRoute","renderContent","setStateWithPersistence","appState","saveState","entries","setItem","saveStateToLocalStorage","url","d3","then","processedTransactions","t","guid","convertedAmount","toDate","valueOf","processTransactionArray","categorisedTransactions","categoryMap","resetFilterState","export_data","encodeURIComponent","mapping","savingsTransfers","downloadFileName","Date","toLocaleString","aLink","download","file","fileReader","FileReader","onload","savingsMap","Error","newTransactionsWithSavings","newTransaction","refString","applyMappingsToTransactions","readAsText","newGoal","newRate","newFilterState","newValue","newBool","isSavingValue","newCategoryMappings","newSortBy","model","analysisData","transactionType","words","createTextAnalysisDataFromTransactionList","includes","getCategoryList","categoryProbabilities","frequencyMap","generateCategoryFrequencies","wordList","innerReducer","existingWord","newCount","count","buildFeatureList","condProbMap","featureList","categoryOccurrenceCount","countMap","forEach","feature","getCategoryOccurrencesForEachWord","filteredByCategory","categoryTotal","adjustedWordFrequency","buildConditionalProbabilityMap","transactionTypes","buildTransactionTypeList","transCondProbMap","transactionTypeList","transactionTypeFrequency","buildTransactionTypeConditionalProbabilityMap","dataToPredict","catProbability","wordProbabilities","helper","strings","probability","newProbability","transactionTypeProbabilities","buildPredictiveModel","trans","convertedTransaction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.007c55fe.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport Chance from 'chance';\n\nfunction TransactionListControls (props) {\n\n    const importCategoryMappingRef = useRef(null);\n    const chance = new Chance();\n\n    return (\n      <div className=\"transaction-list-controls-container\">\n            <div className=\"transaction-list-controls\">\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleClearTransactionsClick(e)}>Clear transactions</button>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleExportCategoriesClick(e)}>Export transaction categories</button>\n              <input className=\"hidden-input\" onChange={(e) => handleCategoryMappingImportInputChange(e)} ref={importCategoryMappingRef} type=\"file\" accept=\".json\"/>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleImportCategoriesClick(e)}>Import transaction categories</button>\n            </div>\n            <div className=\"transaction-list-controls\">\n              <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Show only uncategorised</label>\n                  <input type=\"checkbox\" checked={props.filterClassified} onChange={(e) => handleFilterClassifiedChange(e)}/>\n                </div>\n                {props.filterClassified \n                  ? null\n                  : <div className=\"filter-control\">\n                      <label htmlFor=\"\">Filter by category</label>\n                      <select value={props.filterByCategory} onChange={(e) => handleFilterCategoryChange(e)}>\n                          <option value=\"\">None</option>\n                          {props.categoryList.map(item => <option key={chance.string({length: 16})} value={item}>{item}</option>)}\n                      </select>\n                    </div>\n                }\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Filter by transaction type</label>\n                  <select value={props.filterByTransactionType} onChange={(e) => handleFilterTransactionTypeChange(e)}>\n                      <option value=\"\">None</option>\n                      <option value=\"Expenditure\">Expenditure</option>\n                      <option value=\"Income\">Income</option>\n                  </select>\n                </div>\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Filter by savings transfer</label>\n                  <input type=\"checkbox\" checked={props.filterBySavingsTransfer} onChange={(e) => handleFilterSavingsTransferChange(e)}/>\n                </div>\n              </form>\n            </div>\n          </div>\n    );\n\n  function handleCategoryMappingImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      props.importCategoryMappings(files[0]);\n    }\n  }\n\n  function handleClearTransactionsClick(event) {\n    event.preventDefault();\n    props.clearTransactions();\n  }\n\n  function handleExportCategoriesClick(event) {\n    event.preventDefault();\n    props.generateCategoryMapping();\n  }\n\n  function handleImportCategoriesClick(event) {\n    event.preventDefault();\n    importCategoryMappingRef.current.click();\n  }\n\n  function handleFilterClassifiedChange(event) {\n    props.setFilterClassified(event.target.checked);\n  }\n\n  function handleFilterCategoryChange(event) {\n    props.setCategoryFilter(event.target.value);\n  }\n\n  function handleFilterTransactionTypeChange(event) {\n    props.setTransactionTypeFilter(event.target.value);\n  }\n\n  function handleFilterSavingsTransferChange(event) {\n    props.setSavingsTransferFilter(event.target.checked);\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n}\n\nexport default TransactionListControls;\n","import React, { useState} from 'react';\n\nfunction CategoryEditor (props) {\n\n  const [editingCategory, setEditingCategory] = useState(false);\n\n  const [enteringCategoryName, setEnteringCategoryName] = useState(\"\");\n\n    if(editingCategory) {\n     const prediction = props.getPrediction(props.transaction.id);\n     return <div className=\"category-editor\">\n            {enteringCategoryName.length === 0 && props.categoryList.length > 0\n                ?\n                <div className=\"category-editor-control pure-form\">\n                    <b>Select a category</b>\n                    <select value={props.category} onChange={(e) => selectCategoryChange(e)}>\n                        <option value=\"Undefined\">None</option>\n                        {props.categoryList.map(item => <option key={item + \" \" + props.transaction.id} value={item}>{item}</option>)}\n                    </select>\n                </div>\n                : null\n            }\n            <div className=\"category-editor-control pure-form\">\n                <b>Create a new category</b>\n                <input value={enteringCategoryName} onChange={(e) => handleEditCategoryName(e)} type=\"text\" placeholder=\"Enter category name\"/>\n            </div>\n            {enteringCategoryName.length > 0\n              ? <button onClick={(e) => saveCategoryClick(e)} className=\"pure-button pure-button-primary\">Save category</button>\n              : null\n            }\n            {prediction && prediction[0]\n              ? <div className=\"category-editor-control pure-form\">\n                  <b>Suggestion: {prediction[0].category}</b>\n                  <button className=\"pure-button pure-button-primary\" onClick={() => confirmPredictedCategory(prediction[0].category)}>Confirm</button>\n                </div>\n              : null\n            }\n            <div className=\"category-editor-button-spacer\"></div>\n            <button onClick={(e) => handleCancelEditingClick(e)} className=\"pure-button\">Cancel</button>\n      </div>\n    }\n    else {\n      return <div className=\"category-editor\">\n                {props.category !== \"Undefined\" \n                  ? <div className=\"category-editor\">\n                      <div className=\"category-name\">\n                          {props.category}\n                      </div>\n                      <button onClick={(e) => setCategoryEditing(true, e)} className=\"pure-button\">Edit category</button>\n                  </div>\n                  : <div className=\"category-editor\">\n                      <button onClick={(e)=> setCategoryEditing(true, e)} className=\"pure-button pure-button-primary\">Add category</button>\n                  </div>\n                }\n            </div>\n  } \n\n  function handleEditCategoryName(event) {\n    setEnteringCategoryName(event.target.value);\n  }\n\n  function setCategoryEditing(bool, event) {\n    setEditingCategory(bool)\n  }\n\n  function selectCategoryChange(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, event.target.value);\n    resetState();\n  }\n\n  function confirmPredictedCategory(category) {\n    props.updateCategoryForMatchingItems(props.transaction.id, category);\n    resetState();\n  }\n\n  function saveCategoryClick(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, enteringCategoryName);\n    resetState();\n  }\n\n  function resetState() {\n    setEditingCategory(false);\n    setEnteringCategoryName(\"\")\n  }\n\n  function handleCancelEditingClick(event) {\n    event.preventDefault();\n    resetState();\n  }\n}\n\nexport default CategoryEditor;\n","import React, { useState } from 'react';\n\nfunction DeleteControl(props) {\n\n  const [confirmDelete, setConfirmDelete] = useState(false);\n\n  return (\n    <div className=\"delete-control\">\n      {confirmDelete\n          ? <div className=\"confirm-delete-container\">\n              <p><b>Delete?</b></p>\n              <button \n                  onClick={(e) => handleConfirmDeleteButtonClick(e)} \n                  className=\"pure-button pure-button-primary\">Yes</button>\n               <button \n                  onClick={(e) => handleCancelDeleteButtonClick(e)} \n                  className=\"pure-button\">No</button>\n            </div>\n          : <i onClick={(e) => handleDeleteIconClick(e)} \n              className=\"fas fa-times delete-icon\">\n              </i>\n      }\n    </div>\n  );\n\n  function handleDeleteIconClick(event) {\n    setConfirmDelete(true);\n  }\n\n  function handleConfirmDeleteButtonClick(event) {\n    event.preventDefault();\n    props.deleteTransaction(props.transactionId);\n    setConfirmDelete(false);\n  }\n\n  function handleCancelDeleteButtonClick(event) {\n    event.preventDefault();\n    setConfirmDelete(false);\n  }\n}\n\nexport default DeleteControl;\n","import React from 'react';\nimport CategoryEditor from './CategoryEditor/CategoryEditor';\nimport DeleteControl from './DeleteControl/DeleteControl';\n\nfunction TransactionRow (props) {\n\n    return (\n      <div className=\"transaction-row\">\n        <DeleteControl \n            deleteTransaction={props.deleteTransaction}\n            transactionId={props.transaction.id}\n            stateOwner={props.stateOwner}/>\n        <div className=\"transaction-data-container\">\n        \t<div className=\"transaction-data-head\">\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n                        <b>Counterparty</b>\n                    </div>\n                    <div className=\"transaction-text\">\n        \t\t\t {props.transaction[\"Beguenstigter/Zahlungspflichtiger\"]}\n                    </div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t<b>Amount</b>\n        \t\t\t</div>\n        \t\t\t<div className={props.transaction[\"amount\"] >= 0 ? \"transaction-text\" : \"transaction-text negative\"}>\n        \t\t\t\t{props.transaction[\"Waehrung\"]}: {props.transaction[\"amount\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t</div>\n        \t<div  className=\"transaction-data-body\">\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Date</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstag\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>IBAN</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Kontonummer/IBAN\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Transaction type</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstext\"]}\n        \t\t\t</div>\n        \t\t</div>\n\t\t\t\t<div className=\"transaction-data-body-item\">\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.transaction[\"amount\"] < 0\n\t\t\t\t\t\t? <div>\n\t\t\t\t\t\t\t<div className=\"transaction-data-body-label\">\n\t\t\t\t\t\t\t\t<b>Savings</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"transaction-text\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={props.transaction.isSaving} onChange={(e) => handleIsSavingChange(e, props.transaction.id)}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n        \t\t</div>\n        \t</div>\n        </div>\n        <div className=\"transaction-category-container\">\n            <CategoryEditor \n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                transaction={props.transaction} \n                category={props.transaction[\"category\"]} \n                categoryList={props.categoryList}\n                getPrediction={props.getPrediction}\n            />\n        </div>\n      </div>\n\t);\n\t\n\tfunction handleIsSavingChange(e, id) {\n\t\tprops.updateTransactionIsSaving(id, e.target.checked);\n\t}\n}\n\nexport default TransactionRow;\n","import React from 'react';\n\nfunction SortMenu (props) {\n\n    return (\n      <div className=\"pure-menu pure-menu-horizontal\">\n        <ul className=\"pure-menu-list\">\n            <li className=\"pure-menu-item\">{renderDate()}</li>\n            <li className=\"pure-menu-item\">{renderAmount()}</li>\n        </ul>\n      </div>\n    );\n\n    function renderDate() {\n      switch(props.sortBy) {\n        case \"DATE_ASC\":\n          return <div \n          onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" \n            ? props.setSortBy(\"DATE_ASC\") \n            : props.setSortBy(\"DATE_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-up\"/></span></div>\n        case \"DATE_DESC\":\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_ASC\")} className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_DESC\")} className=\"pure-menu-link\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n      }\n    }\n\n    function renderAmount() {\n       switch(props.sortBy) {\n        case \"AMT_ASC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_ASC\") \n            : props.setSortBy(\"AMT_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-up\"></i></span></div>\n        case \"AMT_DESC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n      }\n    }\n}\n\nexport default SortMenu;\n","import React from 'react';\nimport TransactionRow from './TransactionRow/TransactionRow';\nimport SortMenu from './SortMenu/SortMenu';\n\nfunction TransactionList (props) {\n\n    return <div className=\"transaction-list\">\n          {props.sortedTransactions.length > 0 \n            ? <SortMenu setSortBy={props.setSortBy} sortBy={props.sortBy}/>\n            : null\n          }\n          {props.sortedTransactions.length > 0 \n            ? <p>Displaying {props.sortedTransactions.slice(0, props.displayLimit).length} of {props.transactionLength} total transactions</p>\n            : null\n          }\n          {props.sortedTransactions.slice(0, props.displayLimit).map((transaction) => {\n              return <TransactionRow \n                updateTransactionIsSaving={props.updateTransactionIsSaving}\n                deleteTransaction={props.deleteTransaction} \n                categoryList={props.categoryList} \n                key={transaction.id} \n                transaction={transaction}\n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                getPrediction={props.getPrediction}\n              />\n          })}\n        </div>\n  }\n\nexport default TransactionList;\n","import React, { useRef } from 'react';\nimport moment from 'moment';\nimport TransactionListControls from './TransactionListControls/TransactionListControls';\nimport TransactionList from './TransactionList/TransactionList';\n\nfunction Transactions (props) {\n\n  const uploadFileRef = useRef(null);\n  const categoryList = generateCategoryListDynamically({transactions: props.transactions});\n  const filteredTransactions = filterTransactions({transactions: props.transactions, filterClassified: props.filterClassified, filterByCategory: props.filterByCategory, filterByTransactionType: props.filterByTransactionType, filterBySavingsTransfer: props.filterBySavingsTransfer})\n  const sortedTransactions = sortTransactions({sortBy: props.sortBy, transactions: filteredTransactions});\n\n    return (\n      <div className=\"transactions-container\">\n        <h2>Transactions</h2>\n        {\n          props.transactions.length > 0 \n          ?\n          <TransactionListControls \n            categoryList={categoryList}\n            filterClassified={props.filterClassified}\n            setCategoryFilter={props.setCategoryFilter}\n            setTransactionTypeFilter={props.setTransactionTypeFilter}\n            filterByCategory={props.filterByCategory}\n            filterByTransactionType={props.filterByTransactionType}\n            clearTransactions = {props.clearTransactions}\n            generateCategoryMapping = {props.generateCategoryMapping}\n            importCategoryMappings= {props.importCategoryMappings}\n            setFilterClassified = {props.setFilterClassified}\n            setSavingsTransferFilter={props.setSavingsTransferFilter}\n            filterBySavingsTransfer={props.filterBySavingsTransfer}\n          />\n          :\n          <div>\n            <p>Import your transactions</p>\n            <input className=\"hidden-input\" onChange={(e) => handleImportInputChange(e)} ref={uploadFileRef} type=\"file\" accept=\".csv\"/>\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleImportButtonClick(e)}>Click to import</button>\n          </div>\n        }\n        <TransactionList \n          sortedTransactions={sortedTransactions}\n          setSortBy={props.setSortBy}\n          sortBy={props.sortBy}\n          displayLimit={props.displayLimit}\n          transactionLength={props.transactions.length}\n          deleteTransaction={props.deleteTransaction}\n          updateTransactionIsSaving={props.updateTransactionIsSaving}\n          updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n          categoryList={categoryList}\n          getPrediction={props.getPrediction}\n        />\n        {\n          sortedTransactions.length > (props.displayLimit) \n          ? \n          <div className=\"more-button-container\">\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleShowMoreClick(e)}>Show more</button>\n          </div>\n          : \n          null\n        }\n      </div>\n    );\n  \n  // Extracts alphabetical list of categories from the transaction list to build drop down options\n  function generateCategoryListDynamically({transactions}) {\n    const reducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category}) && current.category !== \"Undefined\") {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    return transactions.reduce(reducer, []).sort();\n  }\n\n  // Apply transaction filters sequentially (if they are set)\n  function filterTransactions({transactions, filterClassified, filterByCategory, filterByTransactionType, filterBySavingsTransfer}) {\n    const filteredOutClassified = filterClassified ? transactions.filter((item) => {\n      return item.category === \"Undefined\";\n    }) : transactions;\n\n    const filtererdByCategoryTransactions = filterByCategory !== \"\" ? filteredOutClassified.filter((item) => {\n      return item.category === filterByCategory;\n    }) : filteredOutClassified;\n\n    const filteredByTypeTransactions = filterByTransactionType !== \"\" ? filtererdByCategoryTransactions.filter((item) => {\n        if (filterByTransactionType === \"Income\") {\n          return item[\"amount\"] >= 0\n        }\n        else if (filterByTransactionType === \"Expenditure\") {\n          return item[\"amount\"] < 0\n        }\n        else {\n          return item\n        }\n    }) : filtererdByCategoryTransactions;\n\n    const filteredBySavingTransfers = filterBySavingsTransfer ? filteredByTypeTransactions.filter((item) => {\n      return item.isSaving;\n    }) : filteredByTypeTransactions;\n\n    return filteredBySavingTransfers;\n  }\n\n  // Sort transactions according to date or amount criteria (ascending or descending)\n  function sortTransactions({sortBy, transactions}) {\n    return transactions.concat([]).sort((a, b) => {\n    const dateA = moment(a.bookingDate);\n    const dateB = moment(b.bookingDate);\n    switch(props.sortBy) {\n      case \"DATE_ASC\":\n        if(dateA.isBefore(dateB)) {\n          return -1;\n        }\n        else if(dateB.isBefore(dateA)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"DATE_DESC\":\n        if(dateB.isBefore(dateA)) {\n          return -1;\n        }\n        else if(dateA.isBefore(dateB)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"AMT_ASC\":\n        return a.amount-b.amount;\n      case \"AMT_DESC\":\n        return b.amount-a.amount;\n      default:\n        return moment(b.bookingDate).utc();\n    }\n  })\n  }\n\n  // Click handler for the file import button (sends click to hidden file input)\n  function handleImportButtonClick(event) {\n    event.preventDefault();\n    uploadFileRef.current.click();\n  }\n\n  // Handles CSV file upload\n  function handleImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const fileURL = window.URL.createObjectURL(files[0]);\n      props.importTransactions(fileURL);\n    }\n  }\n\n  // Handler for the button to show more transactions\n  function handleShowMoreClick(event) {\n    event.preventDefault();\n    props.showMoreTransactions();\n  }\n\n}\n\nexport default Transactions;\n","import React from 'react';\n\nfunction MenuBar (props) {\n    \n    return (\n        <div className=\"management-panel-menu-bar\">\n            <div onClick={(e) => handleMenuItemClick(\"Transactions\", e)}\n                className={props.route === \"Transactions\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Transactions</div>\n                <i className=\"far fa-list-alt fa-1x\"></i>\n            </div>\n            <div onClick={(e) => handleMenuItemClick(\"Reports\", e)}\n                className={props.route === \"Reports\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Reports</div>\n                <i className=\"far fa-chart-bar fa-1x\"></i>\n            </div>\n        </div>\n    );\n\n    function handleMenuItemClick(route, event) {\n        props.setRoute(route);\n    }\n};\n\nexport default MenuBar;","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction IncomeExpenditureByMonthChart (props) {\n\n  const incomeExpenditureByMonthCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n\n      const canvas = incomeExpenditureByMonthCanvas.current;\n\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n\n      const datasets = [{\n            label: 'Income',\n            data: props.data.map(item => item.income),\n            backgroundColor: '#000000'\n        }, \n        {\n            label: 'Expenditure',\n            data: props.data.map(item => item.expenditure),\n            backgroundColor: '#ff0000'\n        }, \n        {\n            label: 'Net savings',\n            data: props.data.map(item => item.total),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Income versus Expenditure by Month</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={incomeExpenditureByMonthCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default IncomeExpenditureByMonthChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction CumulativeSavingsChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n\n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      } \n      const canvas = savingTrajectoryCanvas.current;\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n      const datasets = [\n        {\n            label: 'Cumulative savings',\n            data: props.data.map(item => item.savedTotal),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Cumulative Savings</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={savingTrajectoryCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default CumulativeSavingsChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction ExpenditureByCategoryChart (props) {\n\n  const expenditureByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n      const canvas = expenditureByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n       });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Expenditure by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={expenditureByCategoryCanvas}></canvas>\n              </div>\n            </div>\n}\n\nexport default ExpenditureByCategoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport regression from 'regression';\n\nfunction SavingTrajectoryChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n    if(savedChart.current){\n      savedChart.current.destroy();\n    }\n    const data = generateSavingsProjection(props.data, props.currentBalance, props.savingGoal, props.interestRate)\n    const canvas = savingTrajectoryCanvas.current;\n    const labels = data.map(item => (\"Year \" + item.year));\n    const savingGoal = props.savingGoal;\n    if(props.savingGoal) {\n      renderChart(data, canvas, labels, savingGoal, savedChart, props.interestRate)\n    }\n  });\n\n    return    <div className=\"chart-panel\">\n                <h4>Savings Projection</h4>\n                <div className=\"chart-container\">\n                  {props.savingGoal\n                    ? <canvas ref={savingTrajectoryCanvas}></canvas>\n                    : <div>You need to provide a saving goal</div>\n                  }\n                </div>\n              </div>\n\n}\n\nfunction renderChart(data, canvas, labels, savingGoal, savedChart, interestRate) {\n    const datasets = [\n        {\n            label: 'Projected savings',\n            data: data.map(item => item.balance),\n            backgroundColor: '#000000',\n            borderColor: '#000000',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: `With ${interestRate}% interest`,\n            data: data.map(item => item.balanceWithInterest),\n            backgroundColor: '#D3D3D3',\n            borderColor: '#D3D3D3',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: 'Savings goal',\n            data: data.map(item => savingGoal),\n            borderColor: '#ff0000',\n            backgroundColor: '#ff0000',\n            type: 'line',\n            fill: false,\n            pointRadius: 0\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true,\n                        max: Math.round((parseFloat(savingGoal) * 1.1))\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true,\n            animation: false\n        }\n      });\n\n      savedChart.current = chart;\n}\n\n// Generate chart data for future projected saving\nfunction generateSavingsProjection(data, currentBalance, savingGoal, interestRate) {\n\n  const maxYears = 50;\n\n  const regression = generateSavingsRegression(data);\n\n  const savingRate = regression.equation[0] * 12;\n  const result = project(currentBalance, savingRate, maxYears, savingGoal, interestRate);\n  return result;\n}\n\n// Linear regression on the current cumulative savings trend\nfunction generateSavingsRegression (data) {\n  const accumulateReducer = (accumulator, current) => {\n    let newTotal;\n    if (accumulator.length > 0) {\n      newTotal = accumulator[accumulator.length - 1] + current.total;\n      return accumulator.concat([newTotal]);\n    }\n    else {\n      return accumulator.concat([current.total]);\n    }\n  };\n  const cumulativeSavings = data.reduce(accumulateReducer, [0.0])\n  const dataForRegression = cumulativeSavings.map((item, index) => {\n    return [index, item]\n  });\n  const result = regression.linear(dataForRegression);\n  return result;\n}\n\n// Recursive function to project when cumulative savings will exceed target, given trend\nfunction project(balance, savingRate, maxYears, savingGoal, interestRate) {\n  const counter = 0;\n  const interestPercentage = interestRate === 0 ? 0 : (interestRate / 100);\n  const result = [{year: counter, balance: balance, balanceWithInterest: balance}];\n  return projectHelper(balance, balance, savingRate, maxYears, savingGoal, interestPercentage, counter, result);\n}\n\nfunction projectHelper(balance, balanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, counter, result) {\n  if(counter === maxYears || balance > savingGoal) {\n    return result;\n  }\n  else {\n    const newBalance = balance + savingRate;\n    const newBalanceWithInterest = Math.round(balanceWithInterest + (balanceWithInterest * interestPercentage) + savingRate);\n\n    const newCounter = counter + 1;\n    const newResult = result.concat({year: newCounter, balance: newBalance, balanceWithInterest: newBalanceWithInterest});\n    return projectHelper(newBalance, newBalanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, newCounter, newResult);\n  }\n}\n\n\nexport default SavingTrajectoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction IncomeByCategoryChart (props) {\n\n  const incomeByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n    const canvas = incomeByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Income by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={incomeByCategoryCanvas}></canvas>\n              </div>\n            </div>\n\n}\n\nexport default IncomeByCategoryChart;\n","import React, { useMemo } from 'react';\nimport IncomeExpenditureByMonthChart from './IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart';\nimport CumulativeSavingsChart from './CumulativeSavingsChart/CumulativeSavingsChart';\nimport ExpenditureByCategoryChart from './ExpenditureByCategoryChart/ExpenditureByCategoryChart';\nimport SavingTrajectoryChart from './SavingTrajectoryChart/SavingTrajectoryChart';\nimport IncomeByCategoryChart from './IncomeByCategoryChart/IncomeByCategoryChart';\nimport moment from 'moment';\n\nfunction Reports (props) {\n\n    const currentSavings = getCurrentSavings();\n    const savingGoal = getSavingGoal();\n    const interestRate = getInterestRate();\n\n    const monthlyBreakdown = useMemo(\n      () => calculateIncomeAndExpenditureByMonth(props.transactions), [props.transactions]\n    );\n    const monthData = Array.prototype.concat.apply([], Array.from(monthlyBreakdown.values()).map(item => Array.from(item.values())));\n    const periodSummary = useMemo(\n      () => summariseMonthlyData(monthData, currentSavings, savingGoal), [monthData, currentSavings, savingGoal]\n    );\n    const savingsTrajectory = useMemo(\n      () => calculateSavingTrajectoryByMonth(monthData, currentSavings), [monthData, currentSavings]\n    );\n    const categories = useMemo(\n      () => extractTransactionCategories(props.transactions), [props.transactions]\n    );\n    const categoryExpenditureByMonth = useMemo(\n      () => generateMonthlyCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n    const categoryIncomeByMonth = useMemo(\n      () => generateMonthlyIncomeCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n\n    return <div className=\"reports-container\">\n              <h2>Reports</h2>\n              <div className=\"transaction-list-controls\">\n                <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Current balance (EUR)</label>\n                    <input type=\"number\" value={props.currentBalance} onChange={(e) => handleCurrentBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Other savings (EUR)</label>\n                    <input type=\"number\" value={props.otherSavingsBalance} onChange={(e) => handleOtherSavingsBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Saving goal (EUR)</label>\n                    <input type=\"number\" value={props.savingGoal} onChange={(e) => handleSavingGoalChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Interest rate (%)</label>\n                    <div className=\"interest-rate-slider\">\n                      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={props.interestRate} onChange={(e) => handleInterestRateChange(e)}/>\n                      <div className=\"rate-display\">{props.interestRate}%</div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n\n              <div className=\"chart-panel\">\n                <h4>Saving summary</h4>\n                <div className=\"stat-container\">\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.totalSaving}</div>\n                    <div className=\"stat-text\">Saved during period</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.averageSaving}</div>\n                    <div className=\"stat-text\">Average monthly saving</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">{periodSummary.percentSaved} %</div>\n                    <div className=\"stat-text\">Towards savings target</div>\n                  </div>\n                </div>\n              </div>\n\n              <IncomeExpenditureByMonthChart data={monthData}/>\n\n              <CumulativeSavingsChart  data={savingsTrajectory}/>\n\n              <SavingTrajectoryChart \n                data={monthData} \n                currentBalance={currentSavings}\n                savingGoal={savingGoal}\n                interestRate={interestRate}\n              />\n              <ExpenditureByCategoryChart data={categoryExpenditureByMonth}/>\n              <IncomeByCategoryChart data={categoryIncomeByMonth}/>\n            </div>\n\n  function handleSavingGoalChange(event) {\n    event.preventDefault();\n    const goalAsNumber = Number(event.target.value);\n    if (!isNaN(goalAsNumber) || goalAsNumber === \"\") {\n      props.setSavingGoal(event.target.value);\n    }\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n\n  function handleCurrentBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setCurrentBalance(event.target.value);\n    }      \n  }\n\n  function handleOtherSavingsBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setOtherSavingsBalance(event.target.value);\n    }      \n  }\n\n  function handleInterestRateChange(event) {\n    event.preventDefault();\n    const rateAsNumber = Number(event.target.value);\n    if (!isNaN(rateAsNumber) || rateAsNumber === \"\") {\n      props.setInterestRate(event.target.value);\n    }      \n  }\n\n  function getCurrentSavings() {\n    const accountSavings = isNaN(parseFloat(props.currentBalance)) ? 0 : parseFloat(props.currentBalance);\n    const otherSavings = isNaN(parseFloat(props.otherSavingsBalance)) ? 0 : parseFloat(props.otherSavingsBalance);\n    return accountSavings + otherSavings;\n  }\n\n  function getSavingGoal() {\n    return isNaN(parseFloat(props.savingGoal)) ? 0 : parseFloat(props.savingGoal);\n  }\n\n  function getInterestRate() {\n    return isNaN(parseFloat(props.interestRate)) ? 0 : parseFloat(props.interestRate);\n  }\n}\n\nfunction calculateIncomeAndExpenditureByMonth(transactions) {\n  const reducer = (accumulator, current) => {\n    \n      const month = moment(current.bookingDate).month();\n      const year =  moment(current.bookingDate).year();\n      const amount = parseFloat(current.amount);\n      const isSaving = current.isSaving;\n      const transferred = isSaving\n      ? round((0.00 - amount), 2)\n      : 0.00\n      let newMonthValue;\n      if (accumulator.get(year)) {\n        const accYear = accumulator.get(year);\n        if (accYear.get(month)) {\n          const previousMonth = accYear.get(month);\n          const previousIncome = previousMonth.income;\n          const previousExpenditure = previousMonth.expenditure;\n          const previousTotal = previousMonth.total;\n          const newTransactions = previousMonth.transactions.concat([current])\n          if(isSaving){\n            const previousTransferred = previousMonth.transferred;\n            newMonthValue = {...previousMonth, transferred: round((previousTransferred + transferred), 2), transactions: newTransactions};\n          }\n          else if (amount >= 0.00) {\n            newMonthValue = {...previousMonth, income: round((previousIncome + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions};\n          }\n          else {\n            newMonthValue = {...previousMonth, expenditure: round((previousExpenditure + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions};\n          }\n          \n          accYear.set(month, newMonthValue);\n        }\n        else {\n          if(isSaving){\n            newMonthValue = {year: year, month: month, income: 0.00, expenditure: 0.00, total: 0.00, transactions: [current], transferred: transferred};\n          }\n          else if(amount >= 0.00) {\n            newMonthValue = {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current], transferred: 0.00}\n          }\n          else {\n            newMonthValue = {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current], transferred: 0.00}\n          }\n          accumulator.get(year).set(month, newMonthValue);\n        }\n      }\n      else {\n        if(isSaving){\n          newMonthValue = {year: year, month: month, income: 0.00, expenditure: 0.00, total: 0.00, transactions: [current], transferred: transferred};\n        }\n        else if(amount >= 0.00) {\n          newMonthValue = {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current], transferred: 0.00}\n        }\n        else {\n          newMonthValue = {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current], transferred: 0.00}\n        }\n        accumulator.set(year, new Map());\n        accumulator.get(year).set(month, newMonthValue);\n      }\n      return accumulator\n  }\n\n  const result = transactions.reduce(reducer, new Map());\n  return result;\n}\n\nfunction summariseMonthlyData(monthData, currentBalance, savingGoal) {\n  const savingReducer = (accumulator, current, index) => {\n    return accumulator + current.total\n  }\n\n  const totalSaving = monthData.reduce(savingReducer, 0.0).toFixed(2);\n  const totalMonths = monthData.length;\n  const averageSaving = monthData.length > 0 ? (totalSaving / totalMonths).toFixed(2) : 0.0;\n  const percentSaved = savingGoal && currentBalance && savingGoal > 0.0 ? ((currentBalance / savingGoal) * 100).toFixed(1) : 0.0;\n  return {totalSaving: totalSaving, averageSaving: averageSaving, percentSaved: percentSaved};\n} \n\nfunction round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nfunction calculateSavingTrajectoryByMonth(array, currentBalance) {\n\n  const totalSavingsReducer = (accumulator, current) => {\n    return accumulator + current.total;\n  }\n\n  const transferredReducer = (accumulator, current) => {\n    return accumulator + current.transferred\n  }\n\n  const totalCumulativeSavings = array.reduce(totalSavingsReducer, 0.00);\n  const totalTransferred = array.reduce(transferredReducer, 0.0);\n\n  const floatValue = round((currentBalance - totalCumulativeSavings + totalTransferred), 2);\n\n  const reducer = (accumulator, current, index) => {\n    if (accumulator.length === 0) {\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((current.total + floatValue), 2)}]);\n    }\n    else {\n        const previousSaved = accumulator[accumulator.length-1].savedTotal;\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((previousSaved + current.total), 2)}]);\n    }\n  }\n  return array.reduce(reducer, [])\n}\n\nfunction extractTransactionCategories(transactions) {\n  const categoryReducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category})) {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    const categoryList = transactions.reduce(categoryReducer, []).sort();\n    return categoryList;\n}\n\nfunction convertCategoriesToMap(categories) {\n  const cats = categories.map((category) => {return [category, 0.00]});\n  return new Map(cats);\n}\n\n\n\nfunction calculateCategoryExpenditureTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount < 0 && !current.isSaving) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryExpenditureTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (0.0 - monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nfunction calculateCategoryIncomeTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount > 0) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryIncomeTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyIncomeCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nexport default Reports;\n","import React, {useRef, useState, useEffect} from 'react';\nimport Transactions from './Transactions/Transactions';\nimport MenuBar from './MenuBar/MenuBar';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport Chance from 'chance';\nimport Reports from './Reports/Reports';\n\nfunction App(props) {\n  \n  const downloadMappingRef = useRef(null);\n\n  // Transaction data state\n  const [state, setState] = useState({\n    transactions: [],\n    currentBalance: \"\",\n    otherSavingsBalance: \"0\",\n    savingGoal: \"\",\n    interestRate: \"0\",\n    storedCategoryMappings: new Map()\n  });\n\n  // Routing between tabs\n  const [routeState, setRouteState] = useState(\"Transactions\");\n\n  // Transaction view filter state\n  const [filterState, setFilterState] = useState({\n    transactionDisplayLimit: 50,\n    filterClassified: false,\n    filterByCategory: \"\",\n    filterByTransactionType: \"\",\n    sortBy: \"DATE_DESC\",\n    filterBySavingsTransfer: false\n  });\n\n  const [predict, setPredict] = useState(null);\n\n  useEffect(() => {\n    try {\n      const newState = retrieveStateFromLocalStorage();\n      setState(newState);\n      createPredictiveModel(newState.transactions);\n    } catch (e) {\n      console.log(\"Error applying state from local storage to running application \", e.message);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"app-page app-content\">\n        <a className = \"hidden-input\" href=\"hidden\" ref={downloadMappingRef}>Hidden data download link</a>\n        <div className=\"app-header\">\n            <div className=\"app-logo-container\">\n                Saving Analyst\n            </div>\n        </div>\n        <div className=\"app-main-content\">\n            <div className=\"management-panel\">\n                <MenuBar \n                  setRoute={setRoute} \n                  route={routeState}/>\n                <div className=\"management-panel-content\">\n                    {renderContent()}\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n\n  function renderContent() {\n    switch(routeState) {\n      case \"Transactions\":\n        return <Transactions \n                    displayLimit={filterState.transactionDisplayLimit} \n                    transactions={state.transactions} \n                    filterByCategory={filterState.filterByCategory}\n                    filterClassified={filterState.filterClassified}\n                    filterByTransactionType={filterState.filterByTransactionType}\n                    filterBySavingsTransfer={filterState.filterBySavingsTransfer}\n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    savingGoal={state.savingGoal}\n                    sortBy={state.sortBy}\n                    setSortBy={setSortBy}\n                    importTransactions={importTransactions}\n                    importCategoryMappings={importCategoryMappings}\n                    clearTransactions={clearTransactions}\n                    generateCategoryMapping={generateCategoryMapping}\n                    showMoreTransactions={showMoreTransactions}\n                    setFilterClassified={setFilterClassified}\n                    setCategoryFilter={setCategoryFilter}\n                    setTransactionTypeFilter={setTransactionTypeFilter}\n                    deleteTransaction={deleteTransaction}\n                    updateCategoryForMatchingItems={updateCategoryForMatchingItems}\n                    updateTransactionIsSaving={updateTransactionIsSaving}\n                    getPrediction={getPrediction}\n                    setSavingsTransferFilter={setSavingsTransferFilter}\n                    />\n      case \"Reports\":\n        return <Reports \n                    state={state}\n                    transactions={state.transactions} \n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    interestRate={state.interestRate}\n                    savingGoal={state.savingGoal}\n                    setSavingGoal={setSavingGoal}\n                    setInterestRate={setInterestRate}\n                    setCurrentBalance={setCurrentBalance}\n                    setOtherSavingsBalance={setOtherSavingsBalance}\n                    />\n      default:\n        return <div>Something went wrong!</div>\n    }\n  }\n\n  // Get state from local storage if it exists or instantiate with empty defaults\n  function retrieveStateFromLocalStorage() {\n    try {\n      const savedState = window.localStorage.getItem(\"savedState\");\n      const parsedSavedState = savedState ? JSON.parse(savedState) : {};\n      const newState = {\n          ...state,\n          transactions: (savedState ? parsedSavedState.transactions : []),\n          currentBalance: (savedState ? parsedSavedState.currentBalance : \"\"),\n          otherSavingsBalance: (savedState ? parsedSavedState.otherSavingsBalance : \"\"),\n          savingGoal: (savedState ? parsedSavedState.savingGoal : \"\"),\n          interestRate: (savedState ? parsedSavedState.interestRate : \"0\"),\n          storedCategoryMappings: (savedState ? new Map(parsedSavedState.storedCategoryMappings) : new Map())\n      }\n      return newState;\n    } catch (e) {\n      console.log(\"Error retrieving from local storage\", e.message);\n    }\n  }\n\n  // Save state in React state and local storage at same time\n  function setStateWithPersistence(newState) {\n    try {\n      setState(newState);\n    } catch (e) {\n      console.log(\"Error saving state\", e.message);\n      return;\n    }\n    try {\n      saveStateToLocalStorage(newState);\n    } catch(e) {\n        console.log(\"Error saving to local storage\", e.message)\n        return;\n    }\n    \n  }\n\n  // Save state to local storage\n  function saveStateToLocalStorage(appState) {\n    try {\n      const saveState = {\n          transactions: appState.transactions, \n          currentBalance: appState.currentBalance,\n          otherSavingsBalance: appState.otherSavingsBalance,\n          savingGoal: appState.savingGoal,\n          interestRate: appState.interestRate,\n          storedCategoryMappings: Array.from(appState.storedCategoryMappings.entries())\n        }\n      window.localStorage.setItem(\"savedState\", JSON.stringify(saveState));\n    } catch (e) {\n      console.log(\"Error saving state to local storage\", e.message);\n    }\n  }\n\n  // update the app route\n  function setRoute(newRoute) {\n    setRouteState(newRoute);\n  }\n\n  // process an imported csv file with transaction data ()\n  function importTransactions(url) {\n    try {\n      d3.csv(url).then((result) => {\n          const processedTransactions = processTransactionArray(result);\n          const categorisedTransactions = mapCategoriesToTransactions(state.storedCategoryMappings, processedTransactions)\n          const newState = {...state, transactions: categorisedTransactions}\n          setStateWithPersistence(newState);\n          createPredictiveModel(categorisedTransactions);\n      });\n    } catch(e) {\n      console.log(\"Transaction import failed\" + e.message);\n    }\n  }\n\n  // Reset the transactions and filter state\n  function clearTransactions() {\n    try {\n      const newState = {\n          ...state, \n          transactions: [],\n          currentBalance: \"\",\n          otherSavingsBalance: \"\",\n          savingGoal: \"\",\n          storedCategoryMappings: new Map()\n      }\n      setStateWithPersistence(newState);\n      resetFilterState();\n      setPredict(null);\n    } catch (e) {\n      console.log(\"Error clearing transactions\", e.message);\n    }\n  }\n\n  // Remove a transaction from the list\n  function deleteTransaction(transactionId) {\n    try {\n      const newTransactions = state.transactions.filter((transaction) => {\n        return transaction.id !== transactionId\n      });\n      const newState = {...state, transactions: newTransactions}\n      setStateWithPersistence(newState);\n    } catch (e) {\n      console.log(\"Error deleting transaction\", e.message);\n    }\n  }\n\n  // Generate a downloadable file with the mappings from transaction details to category\n  function generateCategoryMapping() {\n    try {\n      const export_data = \"data:text/json,\" + encodeURIComponent(JSON.stringify({\n        mapping: Array.from(generateCategoryMappingFromTransactionArray(state.transactions).entries()),\n        savingsTransfers: generateSavingTransferMappingFromTransactionArray(state.transactions)\n      }));\n      const export_time = new Date().toLocaleString();\n      const downloadFileName = \"data \" + export_time + \".json\";\n      const aLink = downloadMappingRef.current;\n      aLink.href = export_data;\n      aLink.download = downloadFileName;\n      aLink.click();\n    } catch (e) {\n      console.log(\"Error generating category download file: \", e.message);\n    }\n  }\n\n  // Read an uploaded category mapping file and apply the categories to all matching transactions\n  function importCategoryMappings(file) {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n        const result = JSON.parse(fileReader.result);\n        const categoryMap = new Map(result.mapping);\n        const savingsMap = new Map(result.savingsTransfers);\n        applyMappingsToTransactions(categoryMap, savingsMap);\n    }\n    try {\n      fileReader.readAsText(file);\n    } catch (e) {\n      console.log(\"Error reading file: \", e.message);\n    }\n  }\n\n  // Apply categories to matching transactions\n  function applyMappingsToTransactions(categoryMap, savingsMap) {\n    if(categoryMap) {\n      try {\n        const newTransactions = state.transactions?.map((transaction) => {\n          if (categoryMap.get(transaction.referenceString)) {\n            return {...transaction, category: categoryMap.get(transaction.referenceString)}\n          }\n          else {\n            return transaction;\n          }\n        });\n        if (newTransactions) {\n          const newTransactionsWithSavings = newTransactions.map((newTransaction) => {\n            const date = newTransaction.bookingDate;\n            const amount = newTransaction.amount;\n            const refString = JSON.stringify(newTransaction.referenceString + \"-\" + date + \"-\" + amount);\n            if (savingsMap.get(refString) === true) {\n              return {...newTransaction, isSaving: true}\n            }\n            else {\n              return newTransaction;\n            }\n          });\n          const newState = {...state, transactions: newTransactionsWithSavings}\n          setStateWithPersistence(newState);\n          createPredictiveModel(newTransactionsWithSavings);\n        }\n        else {\n          throw new Error(\"transactions were undefined\");\n        }\n      } catch (e) {\n        console.log(\"Error applying category mappings\", e.message);\n        return;\n      }\n      \n    }\n    else {\n      console.log(\"no category map found!\")\n    }\n  }\n\n  /*\n    Manage the current balance and saving goal\n  */\n\n  function setCurrentBalance(newBalance) {\n    const newState = {...state, currentBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setOtherSavingsBalance(newBalance) {\n    const newState = {...state, otherSavingsBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setSavingGoal(newGoal) {\n    const newState = {...state, savingGoal: newGoal}\n    setStateWithPersistence(newState);\n  }\n\n  function setInterestRate(newRate) {\n    const newState = {...state, interestRate: newRate}\n    setStateWithPersistence(newState);\n  }\n\n  /*\n    Filter state management functions\n  */\n\n  function showMoreTransactions() {\n    const newFilterState = {...filterState, transactionDisplayLimit: filterState.transactionDisplayLimit + 50}\n    setFilterState(newFilterState);\n  }\n\n  function setCategoryFilter(newValue) {\n    const newFilterState = {...filterState, filterByCategory: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function setFilterClassified(newBool) {\n    const newFilterState = {...filterState, filterClassified: newBool, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setTransactionTypeFilter(newValue) {\n    const newFilterState = {...filterState, filterByTransactionType: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function setSavingsTransferFilter(newValue) {\n    const newFilterState = {...filterState, filterBySavingsTransfer: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function updateTransactionIsSaving(transactionId, isSavingValue) {\n    const newTransactions = state.transactions.map((t)=> {\n      if(t.id === transactionId) {\n        return {...t, isSaving: isSavingValue}\n      }\n      else {\n        return t;\n      }\n    });\n    const newState = {...state, transactions: newTransactions}\n    setStateWithPersistence(newState);\n  }\n\n  function updateCategoryForMatchingItems(transactionId, category) {\n    const transaction = state.transactions?.find((t) => {\n      return t.id === transactionId;\n    });\n\n    if (transaction) {\n      const newTransactions = state.transactions.map((t)=> {\n        if(t.referenceString === transaction.referenceString) {\n          return {...t, category: category}\n        }\n        else {\n          return t;\n        }\n      });\n      const newCategoryMappings = generateCategoryMappingFromTransactionArray(newTransactions);\n      const newState = {...state, transactions: newTransactions, storedCategoryMappings: newCategoryMappings}\n      setStateWithPersistence(newState);\n      resetFilterState();\n      createPredictiveModel(newTransactions);\n    }\n  }\n\n  function resetFilterState() {\n    const newFilterState = {...filterState, transactionDisplayLimit: 50, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setSortBy(newSortBy) {\n    const newState = {...state, sortBy: newSortBy}\n    setState(newState);\n  }\n\n\n\n  function createPredictiveModel(transactions) {\n    const model = buildPredictiveModel(transactions);\n    if(model && typeof model === \"function\") {\n      setPredict(() => model);\n    }\n  }\n\n  function getPrediction(transactionId) {\n    const transaction = state.transactions.find(trans => trans.id === transactionId);\n    const convertedTransaction = {\n      id: transaction.id, \n      words: processText(transaction[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: transaction.category, \n      transactionType: transaction[\"Buchungstext\"]\n    };\n    if (convertedTransaction) {\n      if(typeof predict === \"function\") {\n        const result = predict(convertedTransaction);\n        return result;\n      }\n      else {\n        return {}\n      }\n    }\n    else {\n      return {}\n    }\n\n  }\n}\n\n/*\n  Helper methods for category mapping\n*/\n\nfunction processTransactionArray(transactions) {\n  const chance = new Chance();\n  const processedTransactions = transactions.map((t) => {\n    let referenceString;\n    if (t[\"Beguenstigter/Zahlungspflichtiger\"] !== \"\" && t[\"Kontonummer/IBAN\"] !== \"\") {\n      referenceString = t[\"Beguenstigter/Zahlungspflichtiger\"] + \"%\" + t[\"Kontonummer/IBAN\"];\n    }\n    else {\n      referenceString = t[\"Buchungstext\"];\n    }\n    const id = chance.guid();\n    const bookingDate = moment.utc(t[\"Buchungstag\"], \"DD.MM.YY\");\n    const convertedAmount = t[\"Betrag\"].replace(/,/g, '.');\n    const newT = {...t, \n      id: id, \n      amount: parseFloat(convertedAmount).toFixed(2), \n      referenceString: referenceString, \n      bookingDate: bookingDate.toDate(), \n      category: \"Undefined\", \n      isSaving: false\n    };\n    return newT;\n  })\n\n  return processedTransactions.sort((a, b)=> {return a.bookingDate.valueOf() - b.bookingDate.valueOf()});\n}\n\nfunction generateCategoryMappingFromTransactionArray(transactions) {\n  const reducer = (acc, current) => {\n    if (!acc.get(current.referenceString) && current.category !== \"Undefined\") {\n      acc.set(current.referenceString, current.category);\n      return acc;\n    }\n    else {\n      return acc;\n    }\n  }\n  const categoryMap = transactions.reduce(reducer, new Map());\n  return categoryMap;\n}\n\nfunction mapCategoriesToTransactions(categoryMap, transactions) {\n  const newTransactions = transactions.map((transaction) => {\n    if (categoryMap.get(transaction.referenceString)) {\n      return {...transaction, category: categoryMap.get(transaction.referenceString)}\n    }\n    else {\n      return {...transaction, category: \"Undefined\"};\n    }\n  });\n  return newTransactions\n}\n\nfunction generateSavingTransferMappingFromTransactionArray(transactions) {\n  const filtered = transactions.filter(transaction => transaction.isSaving);\n\n  return filtered.map(result => {\n    const date = result.bookingDate;\n    const amount = result.amount;\n    const refString = JSON.stringify(result.referenceString + \"-\" + date + \"-\" + amount);\n    return [refString, result.isSaving]\n  })\n}\n\n/*\n  Methods for predicting category\n*/\n\nfunction buildPredictiveModel(transactions) {\n\n  const categorised = transactions.filter(item=> item.category !== \"Undefined\");\n\n  const analysisData = createTextAnalysisDataFromTransactionList(categorised);\n\n  const categories = getCategoryList(analysisData);\n\n  const categoryProbabilities = generateCategoryFrequencies(analysisData);\n\n  const wordList = buildFeatureList(analysisData);\n\n  const condProbMap = buildConditionalProbabilityMap(analysisData, wordList, categories);\n\n  const transactionTypes = buildTransactionTypeList(analysisData)\n\n  const transCondProbMap = buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypes, categories)\n\n  return (dataToPredict) => {\n\n    if(dataToPredict && dataToPredict.words) {\n\n      const probabilitiesOfCategory = categories.map(category => {\n\n        function returnWordConditionalProbabilities(strings) {\n          return helper(strings, 1);\n        }\n\n        function helper(strings, probability) {\n          if (strings.length === 0) {\n            return 0;\n          }\n          else if (strings.length === 1) {\n            if(!condProbMap.get(category).get(strings[0])){\n              return probability;\n            }\n            else {\n              return probability * condProbMap.get(category).get(strings[0]);\n            }\n          }\n          else {\n            if(!condProbMap.get(category).get(strings[0])){\n              return helper(strings.slice(1), probability);\n            }\n            else {\n              const newProbability = probability * condProbMap.get(category).get(strings[0]);\n              return helper(strings.slice(1), newProbability);\n            }\n          }\n        }\n\n        const catProbability = categoryProbabilities.get(category)\n        const wordProbabilities = returnWordConditionalProbabilities(dataToPredict.words);\n\n        const transactionTypeProbabilities = transCondProbMap.get(category).get(dataToPredict.transactionType);\n        const totalProbability = catProbability * wordProbabilities * transactionTypeProbabilities;\n\n        return {category: category, probability: totalProbability};\n      }).sort((a, b)=>{return b.probability - a.probability}).slice(0, 1);\n\n      return probabilitiesOfCategory;\n      }\n    else {\n      return {}\n    }\n  }\n    \n}\n\nfunction getCategoryList (analysisData) {\n  const categoryListReducer = (acc, current) => {\n    if(!acc.includes(current.category)) {\n      return acc.concat([current.category]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(categoryListReducer, []);\n}\n\n// Identify the frequency distribution of transactions by category\nfunction generateCategoryFrequencies(analysisData) {\n  const reducer = (acc, current) => {\n      if (acc.has(current.category)) {\n        const newValue = (acc.get(current.category) + 1);\n        acc.set(current.category, newValue);\n        return acc;\n      }\n      else {\n        acc.set(current.category, 1);\n        return acc;\n      }\n  }\n\n  const length = analysisData.length;\n\n  const frequencyMap = analysisData.reduce(reducer, new Map());\n\n  const probabilityMap = new Map(Array.from(frequencyMap).map(item => {return [item[0], (item[1]/length)]}))\n\n  return probabilityMap;\n}\n\nfunction buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypeList, categories) {\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    transactionTypeList.forEach(transactionType => {\n      const hasTransactionType = filteredByCategory.filter(item => item.transactionType === transactionType);\n      \n      const transactionTypeFrequency = (1 + hasTransactionType.length) / categoryTotal;\n      result.get(category).set(transactionType, transactionTypeFrequency);\n    });\n  });\n\n  return result;\n}\n\nfunction buildConditionalProbabilityMap (analysisData, featureList, categories) {\n\n  const getCategoryOccurrencesForEachWord = (analysisData, featureList, categories) => {\n    const countMap = new Map();\n\n    featureList.forEach(feature => {\n      let counter = 0\n\n      categories.forEach(category => {\n        const filteredByCategoryAndWord = analysisData.filter(item => item.category === category && item.words.includes(feature.word));\n        if (filteredByCategoryAndWord.length > 0) {\n          counter ++;\n        }\n      })\n\n      countMap.set(feature.word, counter);\n    })\n\n    return countMap;\n  }\n\n  const categoryOccurrenceCount = getCategoryOccurrencesForEachWord(analysisData, featureList, categories);\n\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    featureList.forEach(feature => {\n      const containsWord = filteredByCategory.filter(item => item.words.includes(feature.word));\n      \n      const wordFrequency = (containsWord.length + 0.01) / categoryTotal;\n      \n      const adjustedWordFrequency = wordFrequency * (1 / categoryOccurrenceCount.get(feature.word))\n\n      result.get(category).set(feature.word, adjustedWordFrequency);\n    })\n  });\n\n  return result;\n}\n\n\nfunction buildTransactionTypeList(analysisData) {\n  const reducer = (acc, current) => {\n    if(!acc.includes(current.transactionType)) {\n      return acc.concat([current.transactionType]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(reducer, []);\n}\n\n// Run through list of analysis data and compile deduplicated list of words\nfunction buildFeatureList(analysisData) {\n  const innerReducer = (acc, word) => {\n    const existingWord = acc.find(item => item.word === word);\n    if(!existingWord) {\n      return acc.concat([{word: word, count: 1}]);\n    }\n    else {\n      const newCount = existingWord.count++;\n      existingWord.count = newCount;\n      return acc;\n    }\n  }\n\n  const outerReducer = (acc, current) => {\n    return current.words.reduce(innerReducer, acc);\n  }\n\n  return analysisData.reduce(outerReducer, [])\n}\n\n// Run through list of transactions and build text analysis data\nfunction createTextAnalysisDataFromTransactionList(transactions) {\n  \n  return transactions.map(t=> {\n    return {\n      id: t.id, \n      transactionType: t[\"Buchungstext\"], \n      words: processText(t[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: t.category}\n    }\n  );\n}\n\n// Create a standardised array of words from the recipient details\nfunction processText(text) {\n  const replaceDoubleSlash = text.replace(/\\/\\//g, \" \");\n  const replaceSingleSlash = replaceDoubleSlash.replace(/\\/\\//g, \" \");\n  const replacePercent = replaceSingleSlash.replace(/%/g, \" \");\n  const replaceDot = replacePercent.replace(/\\./g, \" \");\n  const splitString = replaceDot.split(\" \");\n  const result = splitString.filter(word => word !== \"\");\n  return result;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}