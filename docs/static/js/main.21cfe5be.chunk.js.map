{"version":3,"sources":["Transactions/TransactionListControls/TransactionListControls.js","Transactions/TransactionList/TransactionRow/CategoryEditor/CategoryEditor.js","Transactions/TransactionList/TransactionRow/DeleteControl/DeleteControl.js","Transactions/TransactionList/TransactionRow/TransactionRow.js","Transactions/TransactionList/SortMenu/SortMenu.js","Transactions/TransactionList/TransactionList.js","Transactions/Transactions.js","MenuBar/MenuBar.js","Reports/IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart.js","Reports/CumulativeSavingsChart/CumulativeSavingsChart.js","Reports/ExpenditureByCategoryChart/ExpenditureByCategoryChart.js","Reports/SavingTrajectoryChart/SavingTrajectoryChart.js","Reports/IncomeByCategoryChart/IncomeByCategoryChart.js","Reports/OverallExpenditureByCategoryChart/OverallExpenditureByCategoryChart.js","Reports/OverallIncomeByCategoryChart/OverallIncomeByCategoryChart.js","Reports/Reports.js","App.js","index.js"],"names":["TransactionListControls","props","importCategoryMappingRef","useRef","chance","Chance","React","createElement","className","onClick","e","preventDefault","clearTransactions","generateCategoryMapping","onChange","event","files","target","length","importCategoryMappings","handleCategoryMappingImportInputChange","ref","type","accept","current","click","onSubmit","htmlFor","checked","filterClassified","handleFilterClassifiedChange","setFilterClassified","value","filterByCategory","handleFilterCategoryChange","setCategoryFilter","categoryList","map","item","key","string","filterByTransactionType","handleFilterTransactionTypeChange","setTransactionTypeFilter","filterBySavingsTransfer","handleFilterSavingsTransferChange","setSavingsTransferFilter","CategoryEditor","editingCategory","setEditingCategory","useState","enteringCategoryName","setEnteringCategoryName","prediction","getPrediction","transaction","id","category","selectCategoryChange","updateCategoryForMatchingItems","resetState","placeholder","confirmPredictedCategory","setCategoryEditing","bool","DeleteControl","confirmDelete","setConfirmDelete","deleteTransaction","transactionId","TransactionRow","stateOwner","isSaving","updateTransactionIsSaving","handleIsSavingChange","SortMenu","sortBy","setSortBy","renderDate","renderAmount","TransactionList","sortedTransactions","slice","displayLimit","transactionLength","Transactions","uploadFileRef","_ref","transactions","reduce","reducer","acc","find","concat","sort","generateCategoryListDynamically","filteredTransactions","_ref2","filteredOutClassified","filter","filtererdByCategoryTransactions","filteredByTypeTransactions","filterTransactions","_ref3","a","b","dateA","moment","bookingDate","dateB","isBefore","amount","utc","sortTransactions","fileURL","window","URL","createObjectURL","importTransactions","handleImportInputChange","showMoreTransactions","MenuBar","handleMenuItemClick","route","setRoute","IncomeExpenditureByMonthChart","incomeExpenditureByMonthCanvas","savedChart","useEffect","destroy","canvas","labels","data","month","year","datasets","label","income","backgroundColor","expenditure","total","pointRadius","ctx","getContext","chart","Chart","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","responsive","CumulativeSavingsChart","savingTrajectoryCanvas","savedTotal","ExpenditureByCategoryChart","expenditureByCategoryCanvas","months","colors","palette","index","xAxes","stacked","SavingTrajectoryChart","currentBalance","savingGoal","interestRate","savingRate","dataForRegression","accumulateReducer","accumulator","newTotal","regression","linear","generateSavingsRegression","equation","balance","maxYears","projectHelper","balanceWithInterest","interestPercentage","counter","result","newBalance","newBalanceWithInterest","Math","round","newCounter","newResult","project","generateSavingsProjection","borderColor","fill","lineTension","max","parseFloat","animation","renderChart","IncomeByCategoryChart","incomeByCategoryCanvas","OverallExpenditureByCategoryChart","dataset","color","OverallIncomeByCategoryChart","decimals","Number","convertCategoriesToMap","categories","cats","Map","calculateCategoryExpenditureTotals","initialValue","has","get","set","calculateCategoryIncomeTotals","Reports","currentSavings","accountSavings","isNaN","otherSavings","otherSavingsBalance","getCurrentSavings","monthlyBreakdown","useMemo","transferred","newMonthValue","accYear","previousMonth","previousIncome","previousExpenditure","previousTotal","newTransactions","previousTransferred","_objectSpread","monthData","Array","prototype","apply","from","values","periodSummary","totalSaving","savingReducer","toFixed","totalTransferred","transferredReducer","totalMonths","averageSaving","percentSaved","summariseMonthlyData","savingsTrajectory","array","totalCumulativeSavings","totalSavingsReducer","floatValue","previousSaved","calculateSavingTrajectoryByMonth","categoryReducer","overallExpenditureByCategory","entries","generateOverallExpenditureByCategoryDatasets","overallIncomeByCategory","generateOverallIncomeByCategoryDatasets","categoryExpenditureByMonth","transactionsByMonth","monthlyCategories","generateMonthlyCategoryBreakdown","montlyTotaller","filteredCategoryDatasets","noExpenditures","every","dataPoint","generateMonthlyCategoryDatasets","categoryIncomeByMonth","generateMonthlyIncomeCategoryBreakdown","generateMonthlyIncomeCategoryDatasets","balanceAsNumber","setCurrentBalance","handleCurrentBalanceChange","setOtherSavingsBalance","handleOtherSavingsBalanceChange","goalAsNumber","setSavingGoal","handleSavingGoalChange","min","step","rateAsNumber","setInterestRate","handleInterestRateChange","generateCategoryMappingFromTransactionArray","referenceString","generateSavingTransferMappingFromTransactionArray","date","JSON","stringify","processText","text","replace","split","word","App","DB","async","openDB","upgrade","db","createObjectStore","Storage","put","downloadMappingRef","state","setState","storedCategoryMappings","routeState","setRouteState","filterState","setFilterState","transactionDisplayLimit","predict","setPredict","newState","console","log","savedState","parsedSavedState","parse","message","retrieveStateFromLocalStorage","createPredictiveModel","getLocalData","href","newRoute","renderContent","setStateWithPersistence","appState","saveState","saveStateToLocalStorage","url","d3","then","processedTransactions","t","guid","convertedAmount","toDate","valueOf","processTransactionArray","categorisedTransactions","categoryMap","resetFilterState","export_data","encodeURIComponent","mapping","savingsTransfers","downloadFileName","Date","toLocaleString","aLink","download","file","fileReader","FileReader","onload","savingsMap","_state$transactions","Error","newTransactionsWithSavings","newTransaction","refString","applyMappingsToTransactions","readAsText","newGoal","newRate","newFilterState","newValue","newBool","isSavingValue","_state$transactions2","newCategoryMappings","newSortBy","model","analysisData","transactionType","words","createTextAnalysisDataFromTransactionList","categoryListReducer","includes","getCategoryList","categoryProbabilities","frequencyMap","generateCategoryFrequencies","wordList","innerReducer","existingWord","newCount","count","outerReducer","buildFeatureList","condProbMap","featureList","categoryOccurrenceCount","getCategoryOccurrencesForEachWord","countMap","forEach","feature","filteredByCategory","categoryTotal","adjustedWordFrequency","buildConditionalProbabilityMap","transactionTypes","buildTransactionTypeList","transCondProbMap","transactionTypeList","transactionTypeFrequency","buildTransactionTypeConditionalProbabilityMap","dataToPredict","catProbability","wordProbabilities","helper","strings","probability","newProbability","transactionTypeProbabilities","buildPredictiveModel","trans","convertedTransaction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21cfe5be.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport Chance from 'chance';\n\nfunction TransactionListControls (props) {\n\n    const importCategoryMappingRef = useRef(null);\n    const chance = new Chance();\n\n    return (\n      <div className=\"transaction-list-controls-container\">\n            <div className=\"transaction-list-controls\">\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleClearTransactionsClick(e)}>Clear transactions</button>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleExportCategoriesClick(e)}>Export transaction categories</button>\n              <input className=\"hidden-input\" onChange={(e) => handleCategoryMappingImportInputChange(e)} ref={importCategoryMappingRef} type=\"file\" accept=\".json\"/>\n              <button className=\"pure-button pure-button-primary transaction-control-button\" onClick={(e) => handleImportCategoriesClick(e)}>Import transaction categories</button>\n            </div>\n            <div className=\"transaction-list-controls\">\n              <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Show only uncategorised</label>\n                  <input type=\"checkbox\" checked={props.filterClassified} onChange={(e) => handleFilterClassifiedChange(e)}/>\n                </div>\n                {props.filterClassified \n                  ? null\n                  : <div className=\"filter-control\">\n                      <label htmlFor=\"\">Filter by category</label>\n                      <select value={props.filterByCategory} onChange={(e) => handleFilterCategoryChange(e)}>\n                          <option value=\"\">None</option>\n                          {props.categoryList.map(item => <option key={chance.string({length: 16})} value={item}>{item}</option>)}\n                      </select>\n                    </div>\n                }\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Filter by transaction type</label>\n                  <select value={props.filterByTransactionType} onChange={(e) => handleFilterTransactionTypeChange(e)}>\n                      <option value=\"\">None</option>\n                      <option value=\"Expenditure\">Expenditure</option>\n                      <option value=\"Income\">Income</option>\n                  </select>\n                </div>\n                <div className=\"filter-control\">\n                  <label htmlFor=\"\">Filter by savings transfer</label>\n                  <input type=\"checkbox\" checked={props.filterBySavingsTransfer} onChange={(e) => handleFilterSavingsTransferChange(e)}/>\n                </div>\n              </form>\n            </div>\n          </div>\n    );\n\n  function handleCategoryMappingImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      props.importCategoryMappings(files[0]);\n    }\n  }\n\n  function handleClearTransactionsClick(event) {\n    event.preventDefault();\n    props.clearTransactions();\n  }\n\n  function handleExportCategoriesClick(event) {\n    event.preventDefault();\n    props.generateCategoryMapping();\n  }\n\n  function handleImportCategoriesClick(event) {\n    event.preventDefault();\n    importCategoryMappingRef.current.click();\n  }\n\n  function handleFilterClassifiedChange(event) {\n    props.setFilterClassified(event.target.checked);\n  }\n\n  function handleFilterCategoryChange(event) {\n    props.setCategoryFilter(event.target.value);\n  }\n\n  function handleFilterTransactionTypeChange(event) {\n    props.setTransactionTypeFilter(event.target.value);\n  }\n\n  function handleFilterSavingsTransferChange(event) {\n    props.setSavingsTransferFilter(event.target.checked);\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n}\n\nexport default TransactionListControls;\n","import React, { useState} from 'react';\n\nfunction CategoryEditor (props) {\n\n  const [editingCategory, setEditingCategory] = useState(false);\n\n  const [enteringCategoryName, setEnteringCategoryName] = useState(\"\");\n\n    if(editingCategory) {\n     const prediction = props.getPrediction(props.transaction.id);\n     return <div className=\"category-editor\">\n            {enteringCategoryName.length === 0 && props.categoryList.length > 0\n                ?\n                <div className=\"category-editor-control pure-form\">\n                    <b>Select a category</b>\n                    <select value={props.category} onChange={(e) => selectCategoryChange(e)}>\n                        <option value=\"Undefined\">None</option>\n                        {props.categoryList.map(item => <option key={item + \" \" + props.transaction.id} value={item}>{item}</option>)}\n                    </select>\n                </div>\n                : null\n            }\n            <div className=\"category-editor-control pure-form\">\n                <b>Create a new category</b>\n                <input value={enteringCategoryName} onChange={(e) => handleEditCategoryName(e)} type=\"text\" placeholder=\"Enter category name\"/>\n            </div>\n            {enteringCategoryName.length > 0\n              ? <button onClick={(e) => saveCategoryClick(e)} className=\"pure-button pure-button-primary\">Save category</button>\n              : null\n            }\n            {prediction && prediction[0]\n              ? <div className=\"category-editor-control pure-form\">\n                  <b>Suggestion: {prediction[0].category}</b>\n                  <button className=\"pure-button pure-button-primary\" onClick={() => confirmPredictedCategory(prediction[0].category)}>Confirm</button>\n                </div>\n              : null\n            }\n            <div className=\"category-editor-button-spacer\"></div>\n            <button onClick={(e) => handleCancelEditingClick(e)} className=\"pure-button\">Cancel</button>\n      </div>\n    }\n    else {\n      return <div className=\"category-editor\">\n                {props.category !== \"Undefined\" \n                  ? <div className=\"category-editor\">\n                      <div className=\"category-name\">\n                          {props.category}\n                      </div>\n                      <button onClick={(e) => setCategoryEditing(true, e)} className=\"pure-button\">Edit category</button>\n                  </div>\n                  : <div className=\"category-editor\">\n                      <button onClick={(e)=> setCategoryEditing(true, e)} className=\"pure-button pure-button-primary\">Add category</button>\n                  </div>\n                }\n            </div>\n  } \n\n  function handleEditCategoryName(event) {\n    setEnteringCategoryName(event.target.value);\n  }\n\n  function setCategoryEditing(bool, event) {\n    setEditingCategory(bool)\n  }\n\n  function selectCategoryChange(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, event.target.value);\n    resetState();\n  }\n\n  function confirmPredictedCategory(category) {\n    props.updateCategoryForMatchingItems(props.transaction.id, category);\n    resetState();\n  }\n\n  function saveCategoryClick(event) {\n    props.updateCategoryForMatchingItems(props.transaction.id, enteringCategoryName);\n    resetState();\n  }\n\n  function resetState() {\n    setEditingCategory(false);\n    setEnteringCategoryName(\"\")\n  }\n\n  function handleCancelEditingClick(event) {\n    event.preventDefault();\n    resetState();\n  }\n}\n\nexport default CategoryEditor;\n","import React, { useState } from 'react';\n\nfunction DeleteControl(props) {\n\n  const [confirmDelete, setConfirmDelete] = useState(false);\n\n  return (\n    <div className=\"delete-control\">\n      {confirmDelete\n          ? <div className=\"confirm-delete-container\">\n              <p><b>Delete?</b></p>\n              <button \n                  onClick={(e) => handleConfirmDeleteButtonClick(e)} \n                  className=\"pure-button pure-button-primary\">Yes</button>\n               <button \n                  onClick={(e) => handleCancelDeleteButtonClick(e)} \n                  className=\"pure-button\">No</button>\n            </div>\n          : <i onClick={(e) => handleDeleteIconClick(e)} \n              className=\"fas fa-times delete-icon\">\n              </i>\n      }\n    </div>\n  );\n\n  function handleDeleteIconClick(event) {\n    setConfirmDelete(true);\n  }\n\n  function handleConfirmDeleteButtonClick(event) {\n    event.preventDefault();\n    props.deleteTransaction(props.transactionId);\n    setConfirmDelete(false);\n  }\n\n  function handleCancelDeleteButtonClick(event) {\n    event.preventDefault();\n    setConfirmDelete(false);\n  }\n}\n\nexport default DeleteControl;\n","import React from 'react';\nimport CategoryEditor from './CategoryEditor/CategoryEditor';\nimport DeleteControl from './DeleteControl/DeleteControl';\n\nfunction TransactionRow (props) {\n\n    return (\n      <div className=\"transaction-row\">\n        <DeleteControl \n            deleteTransaction={props.deleteTransaction}\n            transactionId={props.transaction.id}\n            stateOwner={props.stateOwner}/>\n        <div className=\"transaction-data-container\">\n        \t<div className=\"transaction-data-head\">\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n                        <b>Counterparty</b>\n                    </div>\n                    <div className=\"transaction-text\">\n        \t\t\t {props.transaction[\"Beguenstigter/Zahlungspflichtiger\"]}\n                    </div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-head-item\">\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t<b>Amount</b>\n        \t\t\t</div>\n        \t\t\t<div className={props.transaction[\"amount\"] >= 0 ? \"transaction-text\" : \"transaction-text negative\"}>\n        \t\t\t\t{props.transaction[\"Waehrung\"]}: {props.transaction[\"amount\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t</div>\n        \t<div  className=\"transaction-data-body\">\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Date</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstag\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>IBAN</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Kontonummer/IBAN\"]}\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div className=\"transaction-data-body-item\">\n        \t\t\t<div className=\"transaction-data-body-label\">\n        \t\t\t\t<b>Transaction type</b>\n        \t\t\t</div>\n        \t\t\t<div className=\"transaction-text\">\n        \t\t\t\t{props.transaction[\"Buchungstext\"]}\n        \t\t\t</div>\n        \t\t</div>\n\t\t\t\t<div className=\"transaction-data-body-item\">\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.transaction[\"amount\"] < 0\n\t\t\t\t\t\t? <div>\n\t\t\t\t\t\t\t<div className=\"transaction-data-body-label\">\n\t\t\t\t\t\t\t\t<b>Savings</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"transaction-text\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={props.transaction.isSaving} onChange={(e) => handleIsSavingChange(e, props.transaction.id)}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n        \t\t</div>\n        \t</div>\n        </div>\n        <div className=\"transaction-category-container\">\n            <CategoryEditor \n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                transaction={props.transaction} \n                category={props.transaction[\"category\"]} \n                categoryList={props.categoryList}\n                getPrediction={props.getPrediction}\n            />\n        </div>\n      </div>\n\t);\n\t\n\tfunction handleIsSavingChange(e, id) {\n\t\tprops.updateTransactionIsSaving(id, e.target.checked);\n\t}\n}\n\nexport default TransactionRow;\n","import React from 'react';\n\nfunction SortMenu (props) {\n\n    return (\n      <div className=\"pure-menu pure-menu-horizontal\">\n        <ul className=\"pure-menu-list\">\n            <li className=\"pure-menu-item\">{renderDate()}</li>\n            <li className=\"pure-menu-item\">{renderAmount()}</li>\n        </ul>\n      </div>\n    );\n\n    function renderDate() {\n      switch(props.sortBy) {\n        case \"DATE_ASC\":\n          return <div \n          onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" \n            ? props.setSortBy(\"DATE_ASC\") \n            : props.setSortBy(\"DATE_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-up\"/></span></div>\n        case \"DATE_DESC\":\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_ASC\")} className=\"pure-menu-link pure-menu-selected\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"DATE_ASC\" && props.sortBy !== \"DATE_DESC\" ? props.setSortBy(\"DATE_DESC\") : props.setSortBy(\"DATE_DESC\")} className=\"pure-menu-link\">Date<span> <i className=\"fas fa-calendar-alt\"/></span><span> <i className=\"fas fa-arrow-down\"/></span></div>\n      }\n    }\n\n    function renderAmount() {\n       switch(props.sortBy) {\n        case \"AMT_ASC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_ASC\") \n            : props.setSortBy(\"AMT_DESC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-up\"></i></span></div>\n        case \"AMT_DESC\":\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link pure-menu-selected\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n        default:\n          return <div onClick={() => props.sortBy !== \"AMT_ASC\" && props.sortBy !== \"AMT_DESC\" \n            ? props.setSortBy(\"AMT_DESC\") \n            : props.setSortBy(\"AMT_ASC\")\n          } className=\"pure-menu-link\">Amount<span> <i className=\"fas fa-sort-amount-down\"></i></span></div>\n      }\n    }\n}\n\nexport default SortMenu;\n","import React from 'react';\nimport TransactionRow from './TransactionRow/TransactionRow';\nimport SortMenu from './SortMenu/SortMenu';\n\nfunction TransactionList (props) {\n\n    return <div className=\"transaction-list\">\n          {props.sortedTransactions.length > 0 \n            ? <SortMenu setSortBy={props.setSortBy} sortBy={props.sortBy}/>\n            : null\n          }\n          {props.sortedTransactions.length > 0 \n            ? <p>Displaying {props.sortedTransactions.slice(0, props.displayLimit).length} of {props.transactionLength} total transactions</p>\n            : null\n          }\n          {props.sortedTransactions.slice(0, props.displayLimit).map((transaction) => {\n              return <TransactionRow \n                updateTransactionIsSaving={props.updateTransactionIsSaving}\n                deleteTransaction={props.deleteTransaction} \n                categoryList={props.categoryList} \n                key={transaction.id} \n                transaction={transaction}\n                updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n                getPrediction={props.getPrediction}\n              />\n          })}\n        </div>\n  }\n\nexport default TransactionList;\n","import React, { useRef } from 'react';\nimport moment from 'moment';\nimport TransactionListControls from './TransactionListControls/TransactionListControls';\nimport TransactionList from './TransactionList/TransactionList';\n\nfunction Transactions (props) {\n\n  const uploadFileRef = useRef(null);\n  const categoryList = generateCategoryListDynamically({transactions: props.transactions});\n  const filteredTransactions = filterTransactions({transactions: props.transactions, filterClassified: props.filterClassified, filterByCategory: props.filterByCategory, filterByTransactionType: props.filterByTransactionType, filterBySavingsTransfer: props.filterBySavingsTransfer})\n  const sortedTransactions = sortTransactions({sortBy: props.sortBy, transactions: filteredTransactions});\n\n    return (\n      <div className=\"transactions-container\">\n        <h2>Transactions</h2>\n        {\n          props.transactions.length > 0 \n          ?\n          <TransactionListControls \n            categoryList={categoryList}\n            filterClassified={props.filterClassified}\n            setCategoryFilter={props.setCategoryFilter}\n            setTransactionTypeFilter={props.setTransactionTypeFilter}\n            filterByCategory={props.filterByCategory}\n            filterByTransactionType={props.filterByTransactionType}\n            clearTransactions = {props.clearTransactions}\n            generateCategoryMapping = {props.generateCategoryMapping}\n            importCategoryMappings= {props.importCategoryMappings}\n            setFilterClassified = {props.setFilterClassified}\n            setSavingsTransferFilter={props.setSavingsTransferFilter}\n            filterBySavingsTransfer={props.filterBySavingsTransfer}\n          />\n          :\n          <div>\n            <p>Import your transactions</p>\n            <input className=\"hidden-input\" onChange={(e) => handleImportInputChange(e)} ref={uploadFileRef} type=\"file\" accept=\".csv\"/>\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleImportButtonClick(e)}>Click to import</button>\n          </div>\n        }\n        <TransactionList \n          sortedTransactions={sortedTransactions}\n          setSortBy={props.setSortBy}\n          sortBy={props.sortBy}\n          displayLimit={props.displayLimit}\n          transactionLength={props.transactions.length}\n          deleteTransaction={props.deleteTransaction}\n          updateTransactionIsSaving={props.updateTransactionIsSaving}\n          updateCategoryForMatchingItems={props.updateCategoryForMatchingItems}\n          categoryList={categoryList}\n          getPrediction={props.getPrediction}\n        />\n        {\n          sortedTransactions.length > (props.displayLimit) \n          ? \n          <div className=\"more-button-container\">\n            <button className=\"pure-button pure-button-primary\" onClick={(e) => handleShowMoreClick(e)}>Show more</button>\n          </div>\n          : \n          null\n        }\n      </div>\n    );\n  \n  // Extracts alphabetical list of categories from the transaction list to build drop down options\n  function generateCategoryListDynamically({transactions}) {\n    const reducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category}) && current.category !== \"Undefined\") {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    return transactions.reduce(reducer, []).sort();\n  }\n\n  // Apply transaction filters sequentially (if they are set)\n  function filterTransactions({transactions, filterClassified, filterByCategory, filterByTransactionType, filterBySavingsTransfer}) {\n    const filteredOutClassified = filterClassified ? transactions.filter((item) => {\n      return item.category === \"Undefined\";\n    }) : transactions;\n\n    const filtererdByCategoryTransactions = filterByCategory !== \"\" ? filteredOutClassified.filter((item) => {\n      return item.category === filterByCategory;\n    }) : filteredOutClassified;\n\n    const filteredByTypeTransactions = filterByTransactionType !== \"\" ? filtererdByCategoryTransactions.filter((item) => {\n        if (filterByTransactionType === \"Income\") {\n          return item[\"amount\"] >= 0\n        }\n        else if (filterByTransactionType === \"Expenditure\") {\n          return item[\"amount\"] < 0\n        }\n        else {\n          return item\n        }\n    }) : filtererdByCategoryTransactions;\n\n    const filteredBySavingTransfers = filterBySavingsTransfer ? filteredByTypeTransactions.filter((item) => {\n      return item.isSaving;\n    }) : filteredByTypeTransactions;\n\n    return filteredBySavingTransfers;\n  }\n\n  // Sort transactions according to date or amount criteria (ascending or descending)\n  function sortTransactions({sortBy, transactions}) {\n    return transactions.concat([]).sort((a, b) => {\n    const dateA = moment(a.bookingDate);\n    const dateB = moment(b.bookingDate);\n    switch(props.sortBy) {\n      case \"DATE_ASC\":\n        if(dateA.isBefore(dateB)) {\n          return -1;\n        }\n        else if(dateB.isBefore(dateA)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"DATE_DESC\":\n        if(dateB.isBefore(dateA)) {\n          return -1;\n        }\n        else if(dateA.isBefore(dateB)) {\n          return 1;\n        }\n        else {\n          return 0;\n        }\n      case \"AMT_ASC\":\n        return a.amount-b.amount;\n      case \"AMT_DESC\":\n        return b.amount-a.amount;\n      default:\n        return moment(b.bookingDate).utc();\n    }\n  })\n  }\n\n  // Click handler for the file import button (sends click to hidden file input)\n  function handleImportButtonClick(event) {\n    event.preventDefault();\n    uploadFileRef.current.click();\n  }\n\n  // Handles CSV file upload\n  function handleImportInputChange(event) {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const fileURL = window.URL.createObjectURL(files[0]);\n      props.importTransactions(fileURL);\n    }\n  }\n\n  // Handler for the button to show more transactions\n  function handleShowMoreClick(event) {\n    event.preventDefault();\n    props.showMoreTransactions();\n  }\n\n}\n\nexport default Transactions;\n","import React from 'react';\n\nfunction MenuBar (props) {\n    \n    return (\n        <div className=\"management-panel-menu-bar\">\n            <div onClick={(e) => handleMenuItemClick(\"Transactions\", e)}\n                className={props.route === \"Transactions\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Transactions</div>\n                <i className=\"far fa-list-alt fa-1x\"></i>\n            </div>\n            <div onClick={(e) => handleMenuItemClick(\"Reports\", e)}\n                className={props.route === \"Reports\" \n                ? \n                \"management-panel-menu-item active\"\n                :\n                \"management-panel-menu-item\"}>\n                <div>Reports</div>\n                <i className=\"far fa-chart-bar fa-1x\"></i>\n            </div>\n        </div>\n    );\n\n    function handleMenuItemClick(route, event) {\n        props.setRoute(route);\n    }\n};\n\nexport default MenuBar;","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction IncomeExpenditureByMonthChart (props) {\n\n  const incomeExpenditureByMonthCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n\n      const canvas = incomeExpenditureByMonthCanvas.current;\n\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n\n      const datasets = [{\n            label: 'Income',\n            data: props.data.map(item => item.income),\n            backgroundColor: '#000000'\n        }, \n        {\n            label: 'Expenditure',\n            data: props.data.map(item => item.expenditure),\n            backgroundColor: '#ff0000'\n        }, \n        {\n            label: 'Net savings',\n            data: props.data.map(item => item.total),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Income versus Expenditure by Month</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={incomeExpenditureByMonthCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default IncomeExpenditureByMonthChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nfunction CumulativeSavingsChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n\n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      } \n      const canvas = savingTrajectoryCanvas.current;\n      const labels = props.data.map(month => ((month.month + 1) + \" \" + month.year));\n      const datasets = [\n        {\n            label: 'Cumulative savings',\n            data: props.data.map(item => item.savedTotal),\n            backgroundColor: '#9b9b9b',\n            type: 'line',\n            pointRadius: 3\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n    });\n\n    return    <div className=\"chart-panel\">\n                <h4>Cumulative Savings</h4>\n                <div className=\"chart-container\">\n                  <canvas ref={savingTrajectoryCanvas}></canvas>\n                </div>\n              </div>\n}\n\nexport default CumulativeSavingsChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction ExpenditureByCategoryChart (props) {\n\n  const expenditureByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n      const canvas = expenditureByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n       });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Monthly expenditure by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={expenditureByCategoryCanvas}></canvas>\n              </div>\n            </div>\n}\n\nexport default ExpenditureByCategoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport regression from 'regression';\n\nfunction SavingTrajectoryChart (props) {\n\n  const savingTrajectoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n    if(savedChart.current){\n      savedChart.current.destroy();\n    }\n    const data = generateSavingsProjection(props.data, props.currentBalance, props.savingGoal, props.interestRate)\n    const canvas = savingTrajectoryCanvas.current;\n    const labels = data.map(item => (\"Year \" + item.year));\n    const savingGoal = props.savingGoal;\n    if(props.savingGoal) {\n      renderChart(data, canvas, labels, savingGoal, savedChart, props.interestRate)\n    }\n  });\n\n    return    <div className=\"chart-panel\">\n                <h4>Savings Projection</h4>\n                <div className=\"chart-container\">\n                  {props.savingGoal\n                    ? <canvas ref={savingTrajectoryCanvas}></canvas>\n                    : <div>You need to provide a saving goal</div>\n                  }\n                </div>\n              </div>\n\n}\n\nfunction renderChart(data, canvas, labels, savingGoal, savedChart, interestRate) {\n    const datasets = [\n        {\n            label: 'Projected savings',\n            data: data.map(item => item.balance),\n            backgroundColor: '#000000',\n            borderColor: '#000000',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: `With ${interestRate}% interest`,\n            data: data.map(item => item.balanceWithInterest),\n            backgroundColor: '#D3D3D3',\n            borderColor: '#D3D3D3',\n            type: 'line',\n            pointRadius: 3,\n            fill: false,\n            lineTension: 0\n        }, \n        {\n            label: 'Savings goal',\n            data: data.map(item => savingGoal),\n            borderColor: '#ff0000',\n            backgroundColor: '#ff0000',\n            type: 'line',\n            fill: false,\n            pointRadius: 0\n        }]\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets,\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true,\n                        max: Math.round((parseFloat(savingGoal) * 1.1))\n                    }\n                }]\n            },\n            maintainAspectRatio: false,\n            responsive: true,\n            animation: false\n        }\n      });\n\n      savedChart.current = chart;\n}\n\n// Generate chart data for future projected saving\nfunction generateSavingsProjection(data, currentBalance, savingGoal, interestRate) {\n\n  const maxYears = 50;\n\n  const regression = generateSavingsRegression(data);\n\n  const savingRate = regression.equation[0] * 12;\n  const result = project(currentBalance, savingRate, maxYears, savingGoal, interestRate);\n  return result;\n}\n\n// Linear regression on the current cumulative savings trend\nfunction generateSavingsRegression (data) {\n  const accumulateReducer = (accumulator, current) => {\n    let newTotal;\n    if (accumulator.length > 0) {\n      newTotal = accumulator[accumulator.length - 1] + current.total;\n      return accumulator.concat([newTotal]);\n    }\n    else {\n      return accumulator.concat([current.total]);\n    }\n  };\n  const cumulativeSavings = data.reduce(accumulateReducer, [0.0])\n  const dataForRegression = cumulativeSavings.map((item, index) => {\n    return [index, item]\n  });\n  const result = regression.linear(dataForRegression);\n  return result;\n}\n\n// Recursive function to project when cumulative savings will exceed target, given trend\nfunction project(balance, savingRate, maxYears, savingGoal, interestRate) {\n  const counter = 0;\n  const interestPercentage = interestRate === 0 ? 0 : (interestRate / 100);\n  const result = [{year: counter, balance: balance, balanceWithInterest: balance}];\n  return projectHelper(balance, balance, savingRate, maxYears, savingGoal, interestPercentage, counter, result);\n}\n\nfunction projectHelper(balance, balanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, counter, result) {\n  if(counter === maxYears || balance > savingGoal) {\n    return result;\n  }\n  else {\n    const newBalance = balance + savingRate;\n    const newBalanceWithInterest = Math.round(balanceWithInterest + (balanceWithInterest * interestPercentage) + savingRate);\n\n    const newCounter = counter + 1;\n    const newResult = result.concat({year: newCounter, balance: newBalance, balanceWithInterest: newBalanceWithInterest});\n    return projectHelper(newBalance, newBalanceWithInterest, savingRate, maxYears, savingGoal, interestPercentage, newCounter, newResult);\n  }\n}\n\n\nexport default SavingTrajectoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction IncomeByCategoryChart (props) {\n\n  const incomeByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n    const canvas = incomeByCategoryCanvas.current;\n      const labels = props.data.months;\n      const colors = palette('mpn65', 50);\n\n      const datasets = props.data.datasets.map((item, index) => {\n        return {\n            label: item.category,\n            data: item.data,\n            backgroundColor: ('#' + colors[index % 50])\n        }\n      })\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n            scales: {\n              xAxes: [{\n                  stacked: true\n              }],\n              yAxes: [{\n                  stacked: true\n              }]\n            },\n            maintainAspectRatio: false,\n            responsive: true\n        }\n      });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Monthly income by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={incomeByCategoryCanvas}></canvas>\n              </div>\n            </div>\n\n}\n\nexport default IncomeByCategoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction OverallExpenditureByCategoryChart (props) {\n\n  const expenditureByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n      const canvas = expenditureByCategoryCanvas.current;\n      const labels = props.data.map(item => item[0]);\n      const colors = palette('mpn65', 50);\n\n      const dataset = {\n            label: \"Overall expenditure\",\n            data: props.data.map(item => item[1]),\n            backgroundColor: colors.map(color => \"#\" + color)\n      }\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: labels,\n          datasets: [dataset]\n        }\n       });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Overall expenditure by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={expenditureByCategoryCanvas}></canvas>\n              </div>\n            </div>\n}\n\nexport default OverallExpenditureByCategoryChart;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as palette from 'google-palette';\n\nfunction OverallIncomeByCategoryChart (props) {\n\n  const incomeByCategoryCanvas = useRef(null);\n  const savedChart = useRef(null);\n  \n  useEffect(() => {\n      if(savedChart.current){\n        savedChart.current.destroy();\n      }\n      const canvas = incomeByCategoryCanvas.current;\n      const labels = props.data.map(item => item[0]);\n      const colors = palette('mpn65', 50);\n\n      const dataset = {\n            label: \"Overall income\",\n            data: props.data.map(item => item[1]),\n            backgroundColor: colors.map(color => \"#\" + color)\n      }\n\n      const ctx = canvas.getContext('2d');\n      // eslint-disable-next-line\n      const chart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n          labels: labels,\n          datasets: [dataset]\n        }\n       });\n\n      savedChart.current = chart;\n  });\n\n  return    <div className=\"chart-panel\">\n              <h4>Overall income by category</h4>\n              <div className=\"chart-container double\">\n                <canvas ref={incomeByCategoryCanvas}></canvas>\n              </div>\n            </div>\n}\n\nexport default OverallIncomeByCategoryChart;\n","import React, { useMemo } from 'react';\nimport IncomeExpenditureByMonthChart from './IncomeExpenditureByMonthChart/IncomeExpenditureByMonthChart';\nimport CumulativeSavingsChart from './CumulativeSavingsChart/CumulativeSavingsChart';\nimport ExpenditureByCategoryChart from './ExpenditureByCategoryChart/ExpenditureByCategoryChart';\nimport SavingTrajectoryChart from './SavingTrajectoryChart/SavingTrajectoryChart';\nimport IncomeByCategoryChart from './IncomeByCategoryChart/IncomeByCategoryChart';\nimport moment from 'moment';\nimport OverallExpenditureByCategoryChart from './OverallExpenditureByCategoryChart/OverallExpenditureByCategoryChart';\nimport OverallIncomeByCategoryChart from './OverallIncomeByCategoryChart/OverallIncomeByCategoryChart';\n\nfunction Reports (props) {\n\n    const currentSavings = getCurrentSavings();\n    const savingGoal = getSavingGoal();\n    const interestRate = getInterestRate();\n\n    const monthlyBreakdown = useMemo(\n      () => calculateIncomeAndExpenditureByMonth(props.transactions), [props.transactions]\n    );\n    const monthData = Array.prototype.concat.apply([], Array.from(monthlyBreakdown.values()).map(item => Array.from(item.values())));\n    const periodSummary = useMemo(\n      () => summariseMonthlyData(monthData, currentSavings, savingGoal), [monthData, currentSavings, savingGoal]\n    );\n    const savingsTrajectory = useMemo(\n      () => calculateSavingTrajectoryByMonth(monthData, currentSavings), [monthData, currentSavings]\n    );\n    const categories = useMemo(\n      () => extractTransactionCategories(props.transactions), [props.transactions]\n    ); \n\n    const overallExpenditureByCategory = useMemo(\n      () => generateOverallExpenditureByCategoryDatasets(props.transactions, categories), [props.transactions, categories]\n    )\n\n    const overallIncomeByCategory = useMemo(\n      () => generateOverallIncomeByCategoryDatasets(props.transactions, categories), [props.transactions, categories]\n    )\n\n    const categoryExpenditureByMonth = useMemo(\n      () => generateMonthlyCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n    const categoryIncomeByMonth = useMemo(\n      () => generateMonthlyIncomeCategoryDatasets(monthData, categories), [monthData, categories]\n    );\n\n    return <div className=\"reports-container\">\n              <h2>Reports</h2>\n              <div className=\"transaction-list-controls\">\n                <form onSubmit={(e) => handleFormSubmit(e)} className=\"pure-form pure-form-stacked\">\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Current balance (EUR)</label>\n                    <input type=\"number\" value={props.currentBalance} onChange={(e) => handleCurrentBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Other savings (EUR)</label>\n                    <input type=\"number\" value={props.otherSavingsBalance} onChange={(e) => handleOtherSavingsBalanceChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Saving goal (EUR)</label>\n                    <input type=\"number\" value={props.savingGoal} onChange={(e) => handleSavingGoalChange(e)}/>\n                  </div>\n                  <div className=\"filter-control\">\n                    <label htmlFor=\"\">Interest rate (%)</label>\n                    <div className=\"interest-rate-slider\">\n                      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={props.interestRate} onChange={(e) => handleInterestRateChange(e)}/>\n                      <div className=\"rate-display\">{props.interestRate}%</div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n\n              <div className=\"chart-panel\">\n                <h4>Saving summary</h4>\n                <div className=\"stat-container\">\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.totalSaving}</div>\n                    <div className=\"stat-text\">Saved during period</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">EUR {periodSummary.averageSaving}</div>\n                    <div className=\"stat-text\">Average monthly saving</div>\n                  </div>\n                  <div className=\"stat-section\">\n                    <div className=\"stat-number\">{periodSummary.percentSaved} %</div>\n                    <div className=\"stat-text\">Towards savings target</div>\n                  </div>\n                </div>\n              </div>\n\n              <IncomeExpenditureByMonthChart data={monthData}/>\n\n              <CumulativeSavingsChart  data={savingsTrajectory}/>\n\n              <SavingTrajectoryChart \n                data={monthData} \n                currentBalance={currentSavings + periodSummary.totalTransferred}\n                savingGoal={savingGoal}\n                interestRate={interestRate}\n              />\n              <OverallExpenditureByCategoryChart data={overallExpenditureByCategory}></OverallExpenditureByCategoryChart>\n              <ExpenditureByCategoryChart data={categoryExpenditureByMonth}/>\n              <OverallIncomeByCategoryChart data={overallIncomeByCategory}/>\n              <IncomeByCategoryChart data={categoryIncomeByMonth}/>\n            </div>\n\n  function handleSavingGoalChange(event) {\n    event.preventDefault();\n    const goalAsNumber = Number(event.target.value);\n    if (!isNaN(goalAsNumber) || goalAsNumber === \"\") {\n      props.setSavingGoal(event.target.value);\n    }\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n  }\n\n  function handleCurrentBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setCurrentBalance(event.target.value);\n    }      \n  }\n\n  function handleOtherSavingsBalanceChange(event) {\n    event.preventDefault();\n    const balanceAsNumber = Number(event.target.value);\n    if (!isNaN(balanceAsNumber) || balanceAsNumber === \"\") {\n      props.setOtherSavingsBalance(event.target.value);\n    }      \n  }\n\n  function handleInterestRateChange(event) {\n    event.preventDefault();\n    const rateAsNumber = Number(event.target.value);\n    if (!isNaN(rateAsNumber) || rateAsNumber === \"\") {\n      props.setInterestRate(event.target.value);\n    }      \n  }\n\n  function getCurrentSavings() {\n    const accountSavings = isNaN(parseFloat(props.currentBalance)) ? 0 : parseFloat(props.currentBalance);\n    const otherSavings = isNaN(parseFloat(props.otherSavingsBalance)) ? 0 : parseFloat(props.otherSavingsBalance);\n    return accountSavings + otherSavings;\n  }\n\n  function getSavingGoal() {\n    return isNaN(parseFloat(props.savingGoal)) ? 0 : parseFloat(props.savingGoal);\n  }\n\n  function getInterestRate() {\n    return isNaN(parseFloat(props.interestRate)) ? 0 : parseFloat(props.interestRate);\n  }\n}\n\nfunction calculateIncomeAndExpenditureByMonth(transactions) {\n  const reducer = (accumulator, current) => {\n    \n      const month = moment(current.bookingDate).month();\n      const year =  moment(current.bookingDate).year();\n      const amount = parseFloat(current.amount);\n      const isSaving = current.isSaving;\n      const transferred = isSaving\n      ? round((0.00 - amount), 2)\n      : 0.00\n      let newMonthValue;\n      if (accumulator.get(year)) {\n        const accYear = accumulator.get(year);\n        if (accYear.get(month)) {\n          const previousMonth = accYear.get(month);\n          const previousIncome = previousMonth.income;\n          const previousExpenditure = previousMonth.expenditure;\n          const previousTotal = previousMonth.total;\n          const newTransactions = previousMonth.transactions.concat([current])\n          if(isSaving){\n            const previousTransferred = previousMonth.transferred;\n            newMonthValue = {...previousMonth, transferred: round((previousTransferred + transferred), 2), transactions: newTransactions};\n          }\n          else if (amount >= 0.00) {\n            newMonthValue = {...previousMonth, income: round((previousIncome + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions};\n          }\n          else {\n            newMonthValue = {...previousMonth, expenditure: round((previousExpenditure + amount), 2), total: round((previousTotal + amount), 2), transactions: newTransactions};\n          }\n          \n          accYear.set(month, newMonthValue);\n        }\n        else {\n          if(isSaving){\n            newMonthValue = {year: year, month: month, income: 0.00, expenditure: 0.00, total: 0.00, transactions: [current], transferred: transferred};\n          }\n          else if(amount >= 0.00) {\n            newMonthValue = {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current], transferred: 0.00}\n          }\n          else {\n            newMonthValue = {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current], transferred: 0.00}\n          }\n          accumulator.get(year).set(month, newMonthValue);\n        }\n      }\n      else {\n        if(isSaving){\n          newMonthValue = {year: year, month: month, income: 0.00, expenditure: 0.00, total: 0.00, transactions: [current], transferred: transferred};\n        }\n        else if(amount >= 0.00) {\n          newMonthValue = {year: year, month: month, income: amount, expenditure: 0.00, total: amount, transactions: [current], transferred: 0.00}\n        }\n        else {\n          newMonthValue = {year: year, month: month, income: 0.00, expenditure: amount, total: amount, transactions: [current], transferred: 0.00}\n        }\n        accumulator.set(year, new Map());\n        accumulator.get(year).set(month, newMonthValue);\n      }\n      return accumulator\n  }\n\n  const result = transactions.reduce(reducer, new Map());\n  return result;\n}\n\nfunction summariseMonthlyData(monthData, currentBalance, savingGoal) {\n  const savingReducer = (accumulator, current, index) => {\n    return accumulator + current.total\n  }\n\n  const transferredReducer = (accumulator, current, index) => {\n    return accumulator + current.transferred\n  }\n\n  const totalSaving = monthData.reduce(savingReducer, 0.0).toFixed(2);\n  const totalTransferred = monthData.reduce(transferredReducer, 0.0);\n  const totalMonths = monthData.length;\n  const averageSaving = monthData.length > 0 ? (totalSaving / totalMonths).toFixed(2) : 0.0;\n  const percentSaved = savingGoal && currentBalance && savingGoal > 0.0 ? (((currentBalance + totalTransferred) / savingGoal) * 100).toFixed(1) : 0.0;\n  return {totalSaving: totalSaving, averageSaving: averageSaving, percentSaved: percentSaved, totalTransferred: totalTransferred};\n} \n\nfunction round(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nfunction calculateSavingTrajectoryByMonth(array, currentBalance) {\n\n  const totalSavingsReducer = (accumulator, current) => {\n    return accumulator + current.total;\n  }\n\n  const transferredReducer = (accumulator, current) => {\n    return accumulator + current.transferred\n  }\n\n  const totalCumulativeSavings = array.reduce(totalSavingsReducer, 0.00);\n  const totalTransferred = array.reduce(transferredReducer, 0.0);\n\n  const floatValue = round((currentBalance - totalCumulativeSavings + totalTransferred), 2);\n\n  const reducer = (accumulator, current, index) => {\n    if (accumulator.length === 0) {\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((current.total + floatValue), 2)}]);\n    }\n    else {\n        const previousSaved = accumulator[accumulator.length-1].savedTotal;\n        return accumulator.concat([{year: current.year, month: current.month, savedTotal: round((previousSaved + current.total), 2)}]);\n    }\n  }\n  return array.reduce(reducer, [])\n}\n\nfunction extractTransactionCategories(transactions) {\n  const categoryReducer = (acc, current) => {\n      if(!acc.find((item) => {return item === current.category})) {\n        return acc.concat([current.category]);\n      }\n      else {\n        return acc;\n      }\n    };\n\n    const categoryList = transactions.reduce(categoryReducer, []).sort();\n    return categoryList;\n}\n\nfunction convertCategoriesToMap(categories) {\n  const cats = categories.map((category) => {return [category, 0.00]});\n  return new Map(cats);\n}\n\n\n\nfunction calculateCategoryExpenditureTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount < 0 && !current.isSaving) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryExpenditureTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (0.0 - monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nfunction generateOverallExpenditureByCategoryDatasets(transactions, categories) {\n\n  const totals = Array.from(calculateCategoryExpenditureTotals(transactions, categories).entries())\n  .sort((a, b) => {return a[1] - b[1]});\n\n  return totals;\n}\n\nfunction generateOverallIncomeByCategoryDatasets(transactions, categories) {\n\n  const totals = Array.from(calculateCategoryIncomeTotals(transactions, categories).entries())\n  .filter(item => item[1] > 0)\n  .sort((a, b) => {return b[1] - a[1]});\n\n  return totals;\n}\n\nfunction calculateCategoryIncomeTotals(transactions, categories) {\n  const reducer = (accumulator, current) => {\n    if (accumulator.has(current.category)) {\n      if(current.amount > 0) {\n        const oldTotal = parseFloat(accumulator.get(current.category));\n        const newTotal = oldTotal + parseFloat(current.amount);\n        accumulator.set(current.category, newTotal);\n      }\n      return accumulator;\n    }\n    else {\n      return accumulator;\n    }\n  }\n  const initialValue = convertCategoriesToMap(categories);\n  return transactions.reduce(reducer, initialValue);\n}\n\nfunction generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories) {\n  return transactionsByMonth.map((month) => {\n    return calculateCategoryIncomeTotals(month.transactions, categories);\n  });\n}\n\nfunction generateMonthlyIncomeCategoryDatasets (transactionsByMonth, categories) {\n  const monthlyCategories = generateMonthlyIncomeCategoryBreakdown(transactionsByMonth, categories);\n\n  const montlyTotaller = (accumulator, current) => {\n    return accumulator + current;\n  }\n\n  const categoryDatasets = categories.map((category) => {\n    const data = monthlyCategories.map(monthlyBreakdown => (monthlyBreakdown.get(category)))\n    return {category: category, data: data, total: data.reduce(montlyTotaller, 0.0), noExpenditures: data.every(dataPoint => (dataPoint === 0))};\n  })\n\n  const filteredCategoryDatasets = categoryDatasets.filter(item => {\n    return !item.noExpenditures;\n  })\n\n  const months = transactionsByMonth.map(month => ((month.month + 1) + \" \" + month.year));\n\n  return {months: months, datasets: filteredCategoryDatasets.sort((a, b) => {\n    return b.total - a.total;\n  })};\n}\n\nexport default Reports;\n","import React, {useRef, useState, useEffect} from 'react';\nimport Transactions from './Transactions/Transactions';\nimport MenuBar from './MenuBar/MenuBar';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport Chance from 'chance';\nimport Reports from './Reports/Reports';\nimport { openDB } from 'idb';\n\nfunction App(props) {\n\n  const DB_NAME = \"saving_analyst\";\n  const TABLE_NAME = \"transactions\";\n\n  const DB = async () => await openDB(DB_NAME, 1, {\n      upgrade(db) {\n          db.createObjectStore(TABLE_NAME);\n      }\n  });\n\n  const Storage = {\n    getItem: async (key) =>\n        (await DB()).get(TABLE_NAME, key),\n    setItem: async (key, value) =>\n        (await DB()).put(TABLE_NAME, value, key),\n    del: async (key) =>\n        (await DB()).delete(TABLE_NAME, key),\n    clear: async (key) =>\n        (await DB()).clear(TABLE_NAME),\n    keys: async () =>\n        (await DB()).getAllKeys(TABLE_NAME)\n  };\n  \n  const downloadMappingRef = useRef(null);\n\n  // Transaction data state\n  const [state, setState] = useState({\n    transactions: [],\n    currentBalance: \"\",\n    otherSavingsBalance: \"0\",\n    savingGoal: \"\",\n    interestRate: \"0\",\n    storedCategoryMappings: new Map()\n  });\n\n  // Routing between tabs\n  const [routeState, setRouteState] = useState(\"Transactions\");\n\n  // Transaction view filter state\n  const [filterState, setFilterState] = useState({\n    transactionDisplayLimit: 50,\n    filterClassified: false,\n    filterByCategory: \"\",\n    filterByTransactionType: \"\",\n    sortBy: \"DATE_DESC\",\n    filterBySavingsTransfer: false\n  });\n\n  const [predict, setPredict] = useState(null);\n\n  useEffect(() => {\n    try {\n      async function getLocalData() {\n        const newState = await retrieveStateFromLocalStorage();\n        setState(newState);\n        createPredictiveModel(newState.transactions);\n      }\n      getLocalData();\n    } catch (e) {\n      console.log(\"Error applying state from local storage to running application \", e.message);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"app-page app-content\">\n        <a className = \"hidden-input\" href=\"hidden\" ref={downloadMappingRef}>Hidden data download link</a>\n        <div className=\"app-header\">\n            <div className=\"app-logo-container\">\n                Saving Analyst\n            </div>\n        </div>\n        <div className=\"app-main-content\">\n            <div className=\"management-panel\">\n                <MenuBar \n                  setRoute={setRoute} \n                  route={routeState}/>\n                <div className=\"management-panel-content\">\n                    {renderContent()}\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n\n  function renderContent() {\n    switch(routeState) {\n      case \"Transactions\":\n        return <Transactions \n                    displayLimit={filterState.transactionDisplayLimit} \n                    transactions={state.transactions} \n                    filterByCategory={filterState.filterByCategory}\n                    filterClassified={filterState.filterClassified}\n                    filterByTransactionType={filterState.filterByTransactionType}\n                    filterBySavingsTransfer={filterState.filterBySavingsTransfer}\n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    savingGoal={state.savingGoal}\n                    sortBy={state.sortBy}\n                    setSortBy={setSortBy}\n                    importTransactions={importTransactions}\n                    importCategoryMappings={importCategoryMappings}\n                    clearTransactions={clearTransactions}\n                    generateCategoryMapping={generateCategoryMapping}\n                    showMoreTransactions={showMoreTransactions}\n                    setFilterClassified={setFilterClassified}\n                    setCategoryFilter={setCategoryFilter}\n                    setTransactionTypeFilter={setTransactionTypeFilter}\n                    deleteTransaction={deleteTransaction}\n                    updateCategoryForMatchingItems={updateCategoryForMatchingItems}\n                    updateTransactionIsSaving={updateTransactionIsSaving}\n                    getPrediction={getPrediction}\n                    setSavingsTransferFilter={setSavingsTransferFilter}\n                    />\n      case \"Reports\":\n        return <Reports \n                    state={state}\n                    transactions={state.transactions} \n                    currentBalance={state.currentBalance}\n                    otherSavingsBalance={state.otherSavingsBalance}\n                    interestRate={state.interestRate}\n                    savingGoal={state.savingGoal}\n                    setSavingGoal={setSavingGoal}\n                    setInterestRate={setInterestRate}\n                    setCurrentBalance={setCurrentBalance}\n                    setOtherSavingsBalance={setOtherSavingsBalance}\n                    />\n      default:\n        return <div>Something went wrong!</div>\n    }\n  }\n\n  // Get state from local storage if it exists or instantiate with empty defaults\n  async function retrieveStateFromLocalStorage() {\n    try {\n      console.log(\"Here\")\n      const savedState = await Storage.getItem(\"savedState\");\n      const parsedSavedState = savedState ? JSON.parse(savedState) : {};\n      const newState = {\n          ...state,\n          transactions: (savedState ? parsedSavedState.transactions : []),\n          currentBalance: (savedState ? parsedSavedState.currentBalance : \"\"),\n          otherSavingsBalance: (savedState ? parsedSavedState.otherSavingsBalance : \"\"),\n          savingGoal: (savedState ? parsedSavedState.savingGoal : \"\"),\n          interestRate: (savedState ? parsedSavedState.interestRate : \"0\"),\n          storedCategoryMappings: (savedState ? new Map(parsedSavedState.storedCategoryMappings) : new Map())\n      }\n      return newState;\n    } catch (e) {\n      console.log(\"Error retrieving from local storage\", e.message);\n    }\n  }\n\n  // Save state in React state and local storage at same time\n  function setStateWithPersistence(newState) {\n    try {\n      setState(newState);\n    } catch (e) {\n      console.log(\"Error saving state\", e.message);\n      return;\n    }\n    try {\n      saveStateToLocalStorage(newState);\n    } catch(e) {\n        console.log(\"Error saving to local storage\", e.message)\n        return;\n    }\n    \n  }\n\n  // Save state to local storage\n  async function saveStateToLocalStorage(appState) {\n    try {\n      const saveState = {\n          transactions: appState.transactions, \n          currentBalance: appState.currentBalance,\n          otherSavingsBalance: appState.otherSavingsBalance,\n          savingGoal: appState.savingGoal,\n          interestRate: appState.interestRate,\n          storedCategoryMappings: Array.from(appState.storedCategoryMappings.entries())\n        }\n      return await Storage.setItem(\"savedState\", JSON.stringify(saveState));\n    } catch (e) {\n      console.log(\"Error saving state to local storage\", e.message);\n    }\n  }\n\n  // update the app route\n  function setRoute(newRoute) {\n    setRouteState(newRoute);\n  }\n\n  // process an imported csv file with transaction data ()\n  function importTransactions(url) {\n    try {\n      d3.csv(url).then((result) => {\n          const processedTransactions = processTransactionArray(result);\n          const categorisedTransactions = mapCategoriesToTransactions(state.storedCategoryMappings, processedTransactions)\n          const newState = {...state, transactions: categorisedTransactions}\n          setStateWithPersistence(newState);\n          createPredictiveModel(categorisedTransactions);\n      });\n    } catch(e) {\n      console.log(\"Transaction import failed\" + e.message);\n    }\n  }\n\n  // Reset the transactions and filter state\n  function clearTransactions() {\n    try {\n      const newState = {\n          ...state, \n          transactions: [],\n          currentBalance: \"\",\n          otherSavingsBalance: \"\",\n          savingGoal: \"\",\n          storedCategoryMappings: new Map()\n      }\n      setStateWithPersistence(newState);\n      resetFilterState();\n      setPredict(null);\n    } catch (e) {\n      console.log(\"Error clearing transactions\", e.message);\n    }\n  }\n\n  // Remove a transaction from the list\n  function deleteTransaction(transactionId) {\n    try {\n      const newTransactions = state.transactions.filter((transaction) => {\n        return transaction.id !== transactionId\n      });\n      const newState = {...state, transactions: newTransactions}\n      setStateWithPersistence(newState);\n    } catch (e) {\n      console.log(\"Error deleting transaction\", e.message);\n    }\n  }\n\n  // Generate a downloadable file with the mappings from transaction details to category\n  function generateCategoryMapping() {\n    try {\n      const export_data = \"data:text/json,\" + encodeURIComponent(JSON.stringify({\n        mapping: Array.from(generateCategoryMappingFromTransactionArray(state.transactions).entries()),\n        savingsTransfers: generateSavingTransferMappingFromTransactionArray(state.transactions)\n      }));\n      const export_time = new Date().toLocaleString();\n      const downloadFileName = \"data \" + export_time + \".json\";\n      const aLink = downloadMappingRef.current;\n      aLink.href = export_data;\n      aLink.download = downloadFileName;\n      aLink.click();\n    } catch (e) {\n      console.log(\"Error generating category download file: \", e.message);\n    }\n  }\n\n  // Read an uploaded category mapping file and apply the categories to all matching transactions\n  function importCategoryMappings(file) {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n        const result = JSON.parse(fileReader.result);\n        const categoryMap = new Map(result.mapping);\n        const savingsMap = new Map(result.savingsTransfers);\n        applyMappingsToTransactions(categoryMap, savingsMap);\n    }\n    try {\n      fileReader.readAsText(file);\n    } catch (e) {\n      console.log(\"Error reading file: \", e.message);\n    }\n  }\n\n  // Apply categories to matching transactions\n  function applyMappingsToTransactions(categoryMap, savingsMap) {\n    if(categoryMap) {\n      try {\n        const newTransactions = state.transactions?.map((transaction) => {\n          if (categoryMap.get(transaction.referenceString)) {\n            return {...transaction, category: categoryMap.get(transaction.referenceString)}\n          }\n          else {\n            return transaction;\n          }\n        });\n        if (newTransactions) {\n          const newTransactionsWithSavings = newTransactions.map((newTransaction) => {\n            const date = newTransaction.bookingDate;\n            const amount = newTransaction.amount;\n            const refString = JSON.stringify(newTransaction.referenceString + \"-\" + date + \"-\" + amount);\n            if (savingsMap.get(refString) === true) {\n              return {...newTransaction, isSaving: true}\n            }\n            else {\n              return newTransaction;\n            }\n          });\n          const newState = {...state, transactions: newTransactionsWithSavings}\n          setStateWithPersistence(newState);\n          createPredictiveModel(newTransactionsWithSavings);\n        }\n        else {\n          throw new Error(\"transactions were undefined\");\n        }\n      } catch (e) {\n        console.log(\"Error applying category mappings\", e.message);\n        return;\n      }\n      \n    }\n    else {\n      console.log(\"no category map found!\")\n    }\n  }\n\n  /*\n    Manage the current balance and saving goal\n  */\n\n  function setCurrentBalance(newBalance) {\n    const newState = {...state, currentBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setOtherSavingsBalance(newBalance) {\n    const newState = {...state, otherSavingsBalance: newBalance}\n    setStateWithPersistence(newState);\n  }\n\n  function setSavingGoal(newGoal) {\n    const newState = {...state, savingGoal: newGoal}\n    setStateWithPersistence(newState);\n  }\n\n  function setInterestRate(newRate) {\n    const newState = {...state, interestRate: newRate}\n    setStateWithPersistence(newState);\n  }\n\n  /*\n    Filter state management functions\n  */\n\n  function showMoreTransactions() {\n    const newFilterState = {...filterState, transactionDisplayLimit: filterState.transactionDisplayLimit + 50}\n    setFilterState(newFilterState);\n  }\n\n  function setCategoryFilter(newValue) {\n    const newFilterState = {...filterState, filterByCategory: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function setFilterClassified(newBool) {\n    const newFilterState = {...filterState, filterClassified: newBool, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setTransactionTypeFilter(newValue) {\n    const newFilterState = {...filterState, filterByTransactionType: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function setSavingsTransferFilter(newValue) {\n    const newFilterState = {...filterState, filterBySavingsTransfer: newValue}\n    setFilterState(newFilterState);\n  }\n\n  function updateTransactionIsSaving(transactionId, isSavingValue) {\n    const newTransactions = state.transactions.map((t)=> {\n      if(t.id === transactionId) {\n        return {...t, isSaving: isSavingValue}\n      }\n      else {\n        return t;\n      }\n    });\n    const newState = {...state, transactions: newTransactions}\n    setStateWithPersistence(newState);\n  }\n\n  function updateCategoryForMatchingItems(transactionId, category) {\n    const transaction = state.transactions?.find((t) => {\n      return t.id === transactionId;\n    });\n\n    if (transaction) {\n      const newTransactions = state.transactions.map((t)=> {\n        if(t.referenceString === transaction.referenceString) {\n          return {...t, category: category}\n        }\n        else {\n          return t;\n        }\n      });\n      const newCategoryMappings = generateCategoryMappingFromTransactionArray(newTransactions);\n      const newState = {...state, transactions: newTransactions, storedCategoryMappings: newCategoryMappings}\n      setStateWithPersistence(newState);\n      resetFilterState();\n      createPredictiveModel(newTransactions);\n    }\n  }\n\n  function resetFilterState() {\n    const newFilterState = {...filterState, transactionDisplayLimit: 50, filterByCategory: \"\"}\n    setFilterState(newFilterState);\n  }\n\n  function setSortBy(newSortBy) {\n    const newState = {...state, sortBy: newSortBy}\n    setState(newState);\n  }\n\n\n\n  function createPredictiveModel(transactions) {\n    const model = buildPredictiveModel(transactions);\n    if(model && typeof model === \"function\") {\n      setPredict(() => model);\n    }\n  }\n\n  function getPrediction(transactionId) {\n    const transaction = state.transactions.find(trans => trans.id === transactionId);\n    const convertedTransaction = {\n      id: transaction.id, \n      words: processText(transaction[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: transaction.category, \n      transactionType: transaction[\"Buchungstext\"]\n    };\n    if (convertedTransaction) {\n      if(typeof predict === \"function\") {\n        const result = predict(convertedTransaction);\n        return result;\n      }\n      else {\n        return {}\n      }\n    }\n    else {\n      return {}\n    }\n\n  }\n}\n\n/*\n  Helper methods for category mapping\n*/\n\nfunction processTransactionArray(transactions) {\n  const chance = new Chance();\n  const processedTransactions = transactions.map((t) => {\n    let referenceString;\n    if (t[\"Beguenstigter/Zahlungspflichtiger\"] !== \"\" && t[\"Kontonummer/IBAN\"] !== \"\") {\n      referenceString = t[\"Beguenstigter/Zahlungspflichtiger\"] + \"%\" + t[\"Kontonummer/IBAN\"];\n    }\n    else {\n      referenceString = t[\"Buchungstext\"];\n    }\n    const id = chance.guid();\n    const bookingDate = moment.utc(t[\"Buchungstag\"], \"DD.MM.YY\");\n    const convertedAmount = t[\"Betrag\"].replace(/,/g, '.');\n    const newT = {...t, \n      id: id, \n      amount: parseFloat(convertedAmount).toFixed(2), \n      referenceString: referenceString, \n      bookingDate: bookingDate.toDate(), \n      category: \"Undefined\", \n      isSaving: false\n    };\n    return newT;\n  })\n\n  return processedTransactions.sort((a, b)=> {return a.bookingDate.valueOf() - b.bookingDate.valueOf()});\n}\n\nfunction generateCategoryMappingFromTransactionArray(transactions) {\n  const reducer = (acc, current) => {\n    if (!acc.get(current.referenceString) && current.category !== \"Undefined\") {\n      acc.set(current.referenceString, current.category);\n      return acc;\n    }\n    else {\n      return acc;\n    }\n  }\n  const categoryMap = transactions.reduce(reducer, new Map());\n  return categoryMap;\n}\n\nfunction mapCategoriesToTransactions(categoryMap, transactions) {\n  const newTransactions = transactions.map((transaction) => {\n    if (categoryMap.get(transaction.referenceString)) {\n      return {...transaction, category: categoryMap.get(transaction.referenceString)}\n    }\n    else {\n      return {...transaction, category: \"Undefined\"};\n    }\n  });\n  return newTransactions\n}\n\nfunction generateSavingTransferMappingFromTransactionArray(transactions) {\n  const filtered = transactions.filter(transaction => transaction.isSaving);\n\n  return filtered.map(result => {\n    const date = result.bookingDate;\n    const amount = result.amount;\n    const refString = JSON.stringify(result.referenceString + \"-\" + date + \"-\" + amount);\n    return [refString, result.isSaving]\n  })\n}\n\n/*\n  Methods for predicting category\n*/\n\nfunction buildPredictiveModel(transactions) {\n\n  const categorised = transactions.filter(item=> item.category !== \"Undefined\");\n\n  const analysisData = createTextAnalysisDataFromTransactionList(categorised);\n\n  const categories = getCategoryList(analysisData);\n\n  const categoryProbabilities = generateCategoryFrequencies(analysisData);\n\n  const wordList = buildFeatureList(analysisData);\n\n  const condProbMap = buildConditionalProbabilityMap(analysisData, wordList, categories);\n\n  const transactionTypes = buildTransactionTypeList(analysisData)\n\n  const transCondProbMap = buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypes, categories)\n\n  return (dataToPredict) => {\n\n    if(dataToPredict && dataToPredict.words) {\n\n      const probabilitiesOfCategory = categories.map(category => {\n\n        function returnWordConditionalProbabilities(strings) {\n          return helper(strings, 1);\n        }\n\n        function helper(strings, probability) {\n          if (strings.length === 0) {\n            return 0;\n          }\n          else if (strings.length === 1) {\n            if(!condProbMap.get(category).get(strings[0])){\n              return probability;\n            }\n            else {\n              return probability * condProbMap.get(category).get(strings[0]);\n            }\n          }\n          else {\n            if(!condProbMap.get(category).get(strings[0])){\n              return helper(strings.slice(1), probability);\n            }\n            else {\n              const newProbability = probability * condProbMap.get(category).get(strings[0]);\n              return helper(strings.slice(1), newProbability);\n            }\n          }\n        }\n\n        const catProbability = categoryProbabilities.get(category)\n        const wordProbabilities = returnWordConditionalProbabilities(dataToPredict.words);\n\n        const transactionTypeProbabilities = transCondProbMap.get(category).get(dataToPredict.transactionType);\n        const totalProbability = catProbability * wordProbabilities * transactionTypeProbabilities;\n\n        return {category: category, probability: totalProbability};\n      }).sort((a, b)=>{return b.probability - a.probability}).slice(0, 1);\n\n      return probabilitiesOfCategory;\n      }\n    else {\n      return {}\n    }\n  }\n    \n}\n\nfunction getCategoryList (analysisData) {\n  const categoryListReducer = (acc, current) => {\n    if(!acc.includes(current.category)) {\n      return acc.concat([current.category]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(categoryListReducer, []);\n}\n\n// Identify the frequency distribution of transactions by category\nfunction generateCategoryFrequencies(analysisData) {\n  const reducer = (acc, current) => {\n      if (acc.has(current.category)) {\n        const newValue = (acc.get(current.category) + 1);\n        acc.set(current.category, newValue);\n        return acc;\n      }\n      else {\n        acc.set(current.category, 1);\n        return acc;\n      }\n  }\n\n  const length = analysisData.length;\n\n  const frequencyMap = analysisData.reduce(reducer, new Map());\n\n  const probabilityMap = new Map(Array.from(frequencyMap).map(item => {return [item[0], (item[1]/length)]}))\n\n  return probabilityMap;\n}\n\nfunction buildTransactionTypeConditionalProbabilityMap(analysisData, transactionTypeList, categories) {\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    transactionTypeList.forEach(transactionType => {\n      const hasTransactionType = filteredByCategory.filter(item => item.transactionType === transactionType);\n      \n      const transactionTypeFrequency = (1 + hasTransactionType.length) / categoryTotal;\n      result.get(category).set(transactionType, transactionTypeFrequency);\n    });\n  });\n\n  return result;\n}\n\nfunction buildConditionalProbabilityMap (analysisData, featureList, categories) {\n\n  const getCategoryOccurrencesForEachWord = (analysisData, featureList, categories) => {\n    const countMap = new Map();\n\n    featureList.forEach(feature => {\n      let counter = 0\n\n      categories.forEach(category => {\n        const filteredByCategoryAndWord = analysisData.filter(item => item.category === category && item.words.includes(feature.word));\n        if (filteredByCategoryAndWord.length > 0) {\n          counter ++;\n        }\n      })\n\n      countMap.set(feature.word, counter);\n    })\n\n    return countMap;\n  }\n\n  const categoryOccurrenceCount = getCategoryOccurrencesForEachWord(analysisData, featureList, categories);\n\n  const result = new Map();\n\n  categories.forEach(category => {\n    result.set(category, new Map());\n    const filteredByCategory = analysisData.filter(item => item.category === category);\n    \n    const categoryTotal = filteredByCategory.length;\n\n    featureList.forEach(feature => {\n      const containsWord = filteredByCategory.filter(item => item.words.includes(feature.word));\n      \n      const wordFrequency = (containsWord.length + 0.01) / categoryTotal;\n      \n      const adjustedWordFrequency = wordFrequency * (1 / categoryOccurrenceCount.get(feature.word))\n\n      result.get(category).set(feature.word, adjustedWordFrequency);\n    })\n  });\n\n  return result;\n}\n\n\nfunction buildTransactionTypeList(analysisData) {\n  const reducer = (acc, current) => {\n    if(!acc.includes(current.transactionType)) {\n      return acc.concat([current.transactionType]);\n    }\n    else {\n      return acc;\n    }\n  }\n\n  return analysisData.reduce(reducer, []);\n}\n\n// Run through list of analysis data and compile deduplicated list of words\nfunction buildFeatureList(analysisData) {\n  const innerReducer = (acc, word) => {\n    const existingWord = acc.find(item => item.word === word);\n    if(!existingWord) {\n      return acc.concat([{word: word, count: 1}]);\n    }\n    else {\n      const newCount = existingWord.count++;\n      existingWord.count = newCount;\n      return acc;\n    }\n  }\n\n  const outerReducer = (acc, current) => {\n    return current.words.reduce(innerReducer, acc);\n  }\n\n  return analysisData.reduce(outerReducer, [])\n}\n\n// Run through list of transactions and build text analysis data\nfunction createTextAnalysisDataFromTransactionList(transactions) {\n  \n  return transactions.map(t=> {\n    return {\n      id: t.id, \n      transactionType: t[\"Buchungstext\"], \n      words: processText(t[\"Beguenstigter/Zahlungspflichtiger\"]), \n      category: t.category}\n    }\n  );\n}\n\n// Create a standardised array of words from the recipient details\nfunction processText(text) {\n  const replaceDoubleSlash = text.replace(/\\/\\//g, \" \");\n  const replaceSingleSlash = replaceDoubleSlash.replace(/\\/\\//g, \" \");\n  const replacePercent = replaceSingleSlash.replace(/%/g, \" \");\n  const replaceDot = replacePercent.replace(/\\./g, \" \");\n  const splitString = replaceDot.split(\" \");\n  const result = splitString.filter(word => word !== \"\");\n  return result;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}